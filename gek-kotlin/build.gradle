import org.jetbrains.dokka.gradle.DokkaTask

plugins {
  id 'gek'
  id 'gek-config'
  id 'gek-repo'
  id 'org.jetbrains.kotlin.jvm'
  id 'org.jetbrains.dokka'
  id 'gek-test'
  id 'gek-publish'
}

description = 'Kotlin support of Gek.'

dependencies {

  implementation platform(project(':gek-dependencies'))
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
  api project(':gek-annotations')
  api project(':gek-core')

  testImplementation project(":gek-test")
  testAnnotationProcessor platform(project(":gek-dependencies"))
  testAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess"
}

javadoc {
  destinationDir = file("$project.projectDir/docs/javadoc")
  dependsOn dokkaJavadoc
  options.encoding = 'UTF-8'
  options.locale = 'en_US'
}

dokkaJavadoc {
  outputDirectory = javadoc.destinationDir
}

dokkaHtml {
  outputDirectory = javadoc.destinationDir
}

tasks.withType(DokkaTask).configureEach {
  dokkaSourceSets.configureEach {
    configuration {
      language = "en"
      encoding = "UTF-8"
    }
  }
}

clean {
  //delete(javadoc.destinationDir)
}

tasks.register('sourcesJar', Jar) {
  group "build"
  classifier "sources"
  from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
  group "build"
  dependsOn dokkaJavadoc {
    outputDirectory = javadoc.destinationDir
  }
  classifier "javadoc"
  from javadoc.destinationDir
}

sourceSets {
  main.kotlin.srcDirs += ['src/main/kotlin', 'src/main/java']
  main.java.srcDirs += ['src/main/kotlin', 'src/main/java']
  test.kotlin.srcDirs += ['src/test/kotlin', 'src/test/java']
  test.java.srcDirs += ['src/test/kotlin', 'src/test/java']
}

compileJava {
  options.encoding = 'UTF-8'
  //options.compilerArgs += ['-Werror', '-Xlint']
  options.incremental = false
}
compileTestJava {
  options.encoding = 'UTF-8'
}

//compileKotlin {
//  kotlinOptions {
//    jvmTarget = javaVersion
//    freeCompilerArgs = ['-Xjvm-default=all']
//  }
//}
//compileTestKotlin {
//  kotlinOptions {
//    jvmTarget = javaVersion
//    freeCompilerArgs = ['-Xjvm-default=all']
//  }
//}

tasks.register('cleanWithJavadoc') {
  dependsOn clean
  group = 'build'
  doLast {
    delete(javadoc.destinationDir)
  }
}