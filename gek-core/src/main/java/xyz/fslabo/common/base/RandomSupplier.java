package xyz.fslabo.common.base;

import lombok.Getter;
import xyz.fslabo.annotations.Immutable;

import java.util.List;
import java.util.Random;
import java.util.function.Supplier;

/**
 * Random Supplier interface to generate random object, extension of {@link Supplier}.
 * <p>
 * The Random Supplier has pairs of {@code scores} and Child Suppliers. Each time a random object is generated, the
 * Random Supplier first randomly selects a Child Supplier based on the proportion of their scores, and then returns the
 * object generated by the selected Child Supplier. For example, to get a Random Supplier which has an 80% chance of
 * returning A and a 20% chance of returning B:
 * <pre>
 *     RandomSupplier.supplier(
 *         RandomSupplier.pair(80, "A"),
 *         RandomSupplier.pair(20, () -> "B")
 *     );
 * </pre>
 *
 * @author fredsuvn
 * @see #of(Pair[])
 * @see #of(Random, Pair[])
 * @see #of(Iterable)
 * @see #of(Random, Iterable)
 */
public interface RandomSupplier<T> extends Supplier<T> {

    /**
     * Gets a random object.
     *
     * @return a random object
     */
    @Override
    T get();

    /**
     * Gets a list of random objects with specified number.
     *
     * @param num specified number
     * @return a list of random objects
     */
    List<T> get(int num);

    /**
     * Returns a Pair of Score and Child Supplier for Random Supplier.
     *
     * @param score    the score
     * @param supplier child supplier
     * @param <T>      type of random object to be built
     * @return a Pair of Score and Child Supplier for Random Supplier
     * @see #of(Pair[])
     * @see #of(Random, Pair[])
     * @see #of(Iterable)
     * @see #of(Random, Iterable)
     */
    static <T> Pair<T> pair(int score, Supplier<T> supplier) {
        return new Pair<>(score, supplier);
    }

    /**
     * Returns a Pair of Score and Specified Value as Child Supplier for Random Supplier.
     * <p>
     * Child Supplier in this method will always return specified value, it is equivalent to
     * {@link #pair(int, Supplier)}:
     * <pre>
     *     return pair(score, () -> value);
     * </pre>
     *
     * @param score the score
     * @param value child supplier
     * @param <T>   type of random object to be built
     * @return a Pair of Score and Child Supplier for Random Supplier
     * @see #of(Pair[])
     * @see #of(Random, Pair[])
     * @see #of(Iterable)
     * @see #of(Random, Iterable)
     */
    static <T> Pair<T> pair(int score, T value) {
        return pair(score, () -> value);
    }

    /**
     * Returns a Random Supplier with specified pairs of Scores and Child Suppliers.
     *
     * @param pairs pairs of Scores and Child Suppliers
     * @param <T>   type of random object to be built
     * @return a Random Supplier
     * @see #pair(int, Object)
     * @see #pair(int, Supplier)
     */
    @SafeVarargs
    static <T> RandomSupplier<T> of(Pair<T>... pairs) {
        return of(new Random(), pairs);
    }

    /**
     * Returns a Random Supplier with specified pairs of Scores and Child Suppliers, and a random to select the pair
     * based on the proportion of their scores.
     *
     * @param random the random to select the pair based on the proportion of their scores
     * @param pairs  pairs of Scores and Child Suppliers
     * @param <T>    type of random object to be built
     * @return a Random Supplier
     * @see #pair(int, Object)
     * @see #pair(int, Supplier)
     */
    @SafeVarargs
    static <T> RandomSupplier<T> of(Random random, Pair<T>... pairs) {
        return new RandomSupplierImpls.RandomSupplierImpl<>(random, pairs);
    }

    /**
     * Returns a Random Supplier with specified pairs of Scores and Child Suppliers.
     *
     * @param pairs pairs of Scores and Child Suppliers
     * @param <T>   type of random object to be built
     * @return a Random Supplier
     * @see #pair(int, Object)
     * @see #pair(int, Supplier)
     */
    static <T> RandomSupplier<T> of(Iterable<Pair<T>> pairs) {
        return of(new Random(), pairs);
    }

    /**
     * Returns a Random Supplier with specified pairs of Scores and Child Suppliers, and a random to select the pair
     * based on the proportion of their scores.
     *
     * @param random the random to select the pair based on the proportion of their scores
     * @param pairs  pairs of Scores and Child Suppliers
     * @param <T>    type of random object to be built
     * @return a Random Supplier
     * @see #pair(int, Object)
     * @see #pair(int, Supplier)
     */
    static <T> RandomSupplier<T> of(Random random, Iterable<Pair<T>> pairs) {
        return new RandomSupplierImpls.RandomSupplierImpl<>(random, pairs);
    }

    /**
     * Score and Child Supplier pair for {@link RandomSupplier}.
     *
     * @param <T> type of random object to be built
     */
    @Getter
    @Immutable
    class Pair<T> {

        /**
         * The score.
         */
        private final int score;
        /**
         * Child supplier.
         */
        private final Supplier<T> supplier;

        private Pair(int score, Supplier<T> supplier) {
            this.score = score;
            this.supplier = supplier;
        }
    }
}
