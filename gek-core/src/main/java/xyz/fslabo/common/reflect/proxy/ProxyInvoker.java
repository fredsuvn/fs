package xyz.fslabo.common.reflect.proxy;

import xyz.fslabo.annotations.Nullable;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/**
 * This interfaces represents an invoker to help invoking proxied method directly. each instance associates a proxied
 * method generated by {@link ProxyBuilder}.
 *
 * @author fredsuvn
 */
public interface ProxyInvoker {

    /**
     * Dynamically invokes instance method (by {@code INVOKEVIRTUAL}/{@code INVOKEINTERFACE}) associated to this invoker
     * with specified instance and arguments.
     * <p>
     * Note this method does not expect a proxy instance, of which class declares the proxy method associated to this
     * invoker, to be passed in. (as first argument of
     * {@link MethodProxyHandler#invoke(Object, Method, Object[], ProxyInvoker)}), because executing method on the proxy
     * instance would cause recursive calls, eventually resulting in a stack overflow.
     *
     * @param inst given instance
     * @param args the arguments
     * @return result of invocation
     * @throws Throwable the bare exceptions thrown by the proxied method, without any wrapping such as
     *                   {@link InvocationTargetException}
     */
    @Nullable
    Object invoke(Object inst, Object[] args) throws Throwable;

    /**
     * Specially invokes proxied ({@code super}) method (by {@code INVOKESPECIAL}) associated to this invoker with
     * specified instance and arguments.
     *
     * @param inst given instance
     * @param args the arguments
     * @return result of invocation
     * @throws Throwable the bare exceptions thrown by the proxied method, without any wrapping such as
     *                   {@link InvocationTargetException}
     */
    @Nullable
    Object invokeSuper(Object inst, Object[] args) throws Throwable;
}
