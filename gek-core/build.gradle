plugins {
  id 'gek'
  id 'gek-config'
  id 'gek-repo'
  id 'java-library'
  id 'gek-test'
  id 'com.google.protobuf' version "$protobufPluginVersion"
  id 'gek-publish'
}

description = 'Core of Gek.'

java {
  registerFeature('proxySpringSupport') {
    usingSourceSet(sourceSets.main)
    capability('xyz.fsgek.build', 'proxy-spring-support', projectVersion)
  }
  registerFeature('proxyCglibSupport') {
    usingSourceSet(sourceSets.main)
    capability('xyz.fsgek.build', 'proxy-cglib-support', projectVersion)
  }
  registerFeature('dataProtobufSupport') {
    usingSourceSet(sourceSets.main)
    capability('xyz.fsgek.build', 'data-protobuf-support', projectVersion)
  }
}

dependencies {

  implementation platform(project(':gek-dependencies'))
  annotationProcessor platform(project(':gek-dependencies'))

  api project(':gek-annotations')

  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  proxySpringSupportImplementation 'org.springframework:spring-core'
  proxyCglibSupportImplementation 'cglib:cglib'
  dataProtobufSupportImplementation 'com.google.protobuf:protobuf-java'

  testImplementation platform(project(':gek-dependencies'))
  testAnnotationProcessor platform(project(":gek-dependencies"))

  testAnnotationProcessor 'org.projectlombok:lombok'
  //testAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess"

  testImplementation project(":gek-test")
  testImplementation "com.google.protobuf:protobuf-java"
}

java {
  withJavadocJar()
  withSourcesJar()
}

javadoc {
  //options.addStringOption('Xdoclint:none', '-quiet')
  destinationDir = file("$project.projectDir/docs/javadoc")
  options.encoding = 'UTF-8'
  options.locale = 'en_US'
}

def generatedPath = "$project.projectDir/generated"
def protoPath = "$generatedPath/proto"

sourceSets {
  test {
    proto {
      srcDirs = ["src/test/proto"]
    }
    java {
      srcDirs += "$protoPath/test/java"
    }
  }
}

protobuf {
  generatedFilesBaseDir = "$protoPath"
  protoc {
    // Download from repositories
    artifact = "com.google.protobuf:protoc:$protocVersion"
    generatedFilesBaseDir = "$protoPath"
  }

  plugins {
    //grpc {
    //  artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
    //}
    //grpckt {
    //  artifact = "io.grpc:protoc-gen-grpc-kotlin:$grpcKotlinVersion"
    //}
  }

  generateProtoTasks {
    all()*.each { task ->
      task.plugins {
        // Generate Java gRPC classes
        //grpc {
        //  setOutputSubDir "$protoGenDir"
        //}
        // Generate Kotlin gRPC using the custom plugin from library
        //grpckt {}
      }
    }
  }
}

clean {
  delete("${protobuf.generatedFilesBaseDir}")
  delete("$generatedPath/temp")
}

tasks.register('cleanWithJavadoc') {
  dependsOn clean
  group = 'build'
  doLast {
    delete(javadoc.destinationDir)
  }
}

test {
  include("**/TU.class")
}