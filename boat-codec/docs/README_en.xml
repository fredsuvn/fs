<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="3"?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title><inlinemediaobject>
<imageobject>
<imagedata fileref="../../logo.svg"/>
</imageobject>
<textobject><phrase>Boat Codec</phrase></textobject>
</inlinemediaobject> <literal>boat-codec</literal></title>
<subtitle>Boat Codec&#8201;&#8212;&#8201;Codec Lib of <link xl:href="../../README.md">Boat</link></subtitle>
<date>2021-06-23</date>
<author>
<personname>
<firstname>Sun</firstname>
<surname>Qian</surname>
</personname>
<email>fredsuvn@163.com</email>
</author>
<authorinitials>SQ</authorinitials>
</info>
<section xml:id="_introduction">
<title>Introduction</title>
<simpara>Boat Codec provides Unified classes (<literal>Codec</literal>, <literal>Codecing</literal>) to support various codec operations such as HEX, BASE64, MD5, HmacMD5, AES, RSA, SM2 ,etc.</simpara>
</section>
<section xml:id="_usage">
<title>Usage</title>
<simpara>Core utilities and class of boat-codec is <literal>Codecs</literal> and <literal>Codecing</literal>:</simpara>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">class Example{
    @Test
    public void test() {
        RsaCodec rsaCodec = Codecs.rsaCodec();
        RsaKeyPair rsaKeyPair = rsaCodec.newKeyPair();
        String data = random(512);
        byte[] bytes = rsaCodec.encrypt(rsaKeyPair.publicKey(), data);
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">class Example {
    @Test
    fun test() {
        val rsaCodec = rsaCodec()
        val rsaKeyPair = rsaCodec.newKeyPair()
        val data: String = random(512)
        val bytes = rsaCodec.encrypt(rsaKeyPair.publicKey, data)
    }
}</programlisting>
</para>
</formalpara>
<simpara>Boat Codec has 4 type of codec processor:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Codec</literal>: Core codec interface, represents a type of codec way;</simpara>
</listitem>
<listitem>
<simpara><literal>EncodeCodec</literal>: Encode code such as HEX, BASE64;</simpara>
</listitem>
<listitem>
<simpara><literal>DigestCodec</literal>: Digest codec such as MD5;</simpara>
</listitem>
<listitem>
<simpara><literal>MacCodec</literal>: MAC codec such as HmacMD5;</simpara>
</listitem>
<listitem>
<simpara><literal>CipherCodec</literal>: Cipher codec such as <literal>AES</literal>, <literal>RSA</literal>, <literal>SM2</literal>;</simpara>
</listitem>
</itemizedlist>
<simpara>There are two styles to do codec operation: <literal>Static</literal> or <literal>Chain</literal></simpara>
<section xml:id="_static_style">
<title>Static Style:</title>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">class Example{
    @Test
    public void test() {
        RsaCodec rsaCodec = Codecs.rsaCodec();
        byte[] bytes = rsaCodec.encrypt(rsaKeyPair.publicKey(), data);
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">class Example {
    @Test
    fun test() {
        val rsaCodec = rsaCodec()
        val bytes = rsaCodec.encrypt(rsaKeyPair.publicKey, data)
    }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_chain_style">
<title>Chain Style:</title>
<simpara>Using <literal>Codecing</literal>: Codec processing for chain operation.</simpara>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">class Example{
    @Test
    public void test() {
        Codecs.codec(messageBase64).decodeBase64().encryptAes(secretKey).doFinal();
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">class Example {
    @Test
    fun test() {
        messageBase64.codec().decodeBase64().encryptAes(secretKey).doFinal()
    }
}</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="_samples">
<title>Samples</title>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.codec;

import org.testng.annotations.Test;
import xyz.srclab.common.codec.Codecs;
import xyz.srclab.common.codec.EncodeCodec;
import xyz.srclab.common.codec.aes.AesKeys;
import xyz.srclab.common.test.TestLogger;

import javax.crypto.SecretKey;

public class CodecSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testCodec() {
        String password = "hei, xiongdi, womenhaojiubujiannizainali";
        String messageBase64 = "aGVpLCBwZW5neW91LCBydWd1b3poZW5kZXNoaW5pcWluZ2Rhemhhb2h1";
        SecretKey secretKey = AesKeys.newKey(password);

        //Use static
        String message = EncodeCodec.base64().decodeToString(messageBase64);
        byte[] encrypt = Codecs.aesCodec().encrypt(secretKey, message);
        String decrypt = Codecs.aesCodec().decryptToString(secretKey, encrypt);
        //hei, pengyou, ruguozhendeshiniqingdazhaohu
        logger.log("decrypt: {}", decrypt);

        //Use chain
        encrypt = Codecs.codec(messageBase64).decodeBase64().encryptAes(secretKey).doFinal();
        decrypt = Codecs.codec(encrypt).decryptAes(secretKey).doFinalString();
        //hei, pengyou, ruguozhendeshiniqingdazhaohu
        logger.log("decrypt: {}", decrypt);
    }

    @Test
    public void testEncode() {
        logger.log(Codecs.hexString("123456789"));
        logger.log(Codecs.base64String("123456789"));
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.codec

import org.testng.annotations.Test
import xyz.srclab.common.codec.*
import xyz.srclab.common.codec.aes.toAesKey
import xyz.srclab.common.test.TestLogger

class CodecSample {

    @Test
    fun testCodec() {
        val password = "hei, xiongdi, womenhaojiubujiannizainali"
        val messageBase64 = "aGVpLCBwZW5neW91LCBydWd1b3poZW5kZXNoaW5pcWluZ2Rhemhhb2h1"
        val secretKey = password.toAesKey()

        //Use static
        val message: String = Base64Codec.decodeToString(messageBase64)
        var encrypt = aesCodec().encrypt(secretKey, message)
        var decrypt = aesCodec().decryptToString(secretKey, encrypt)
        //hei, pengyou, ruguozhendeshiniqingdazhaohu
        logger.log("decrypt: {}", decrypt)

        //Use chain
        encrypt = messageBase64.codec().decodeBase64().encryptAes(secretKey).doFinal()
        decrypt = encrypt.codec().decryptAes(secretKey).doFinalString()
        //hei, pengyou, ruguozhendeshiniqingdazhaohu
        logger.log("decrypt: {}", decrypt)
    }

    @Test
    fun testEncode() {
        logger.log("123456789".toHexString())
        logger.log("123456789".toBase64String())
    }

    companion object {
        private val logger = TestLogger.DEFAULT
    }
}</programlisting>
</para>
</formalpara>
</section>
</article>