<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="3"?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title><inlinemediaobject>
<imageobject>
<imagedata fileref="../../logo.svg"/>
</imageobject>
<textobject><phrase>Boat Codec</phrase></textobject>
</inlinemediaobject> <literal>boat-codec</literal></title>
<subtitle>Boat Codec&#8201;&#8212;&#8201;<link xl:href="../../README.md">Boat</link> 编码库</subtitle>
<date>2021-07-05</date>
<author>
<personname>
<firstname>Sun</firstname>
<surname>Qian</surname>
</personname>
<email>fredsuvn@163.com</email>
</author>
<authorinitials>SQ</authorinitials>
</info>
<section xml:id="_简介">
<title>简介</title>
<simpara>Boat Codec 提供了统一的接口 (<literal>Codec</literal>, <literal>Codecing</literal>) 来支持大量的编码操作, 如 HEX, BASE64, MD5, HmacMD5, AES, RSA, SM2 ,etc.</simpara>
</section>
<section xml:id="_用法">
<title>用法</title>
<simpara>boat-codec 的核心工具类和接口是 <literal>Codecs</literal> 和 <literal>Codecing</literal>:</simpara>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">class Example{
    @Test
    public void test() {
        RsaCodec rsaCodec = Codecs.rsaCodec();
        RsaKeyPair rsaKeyPair = rsaCodec.newKeyPair();
        String data = random(512);
        byte[] bytes = rsaCodec.encrypt(rsaKeyPair.publicKey(), data);
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">class Example {
    @Test
    fun test() {
        val rsaCodec = rsaCodec()
        val rsaKeyPair = rsaCodec.newKeyPair()
        val data: String = random(512)
        val bytes = rsaCodec.encrypt(rsaKeyPair.publicKey, data)
    }
}</programlisting>
</para>
</formalpara>
<simpara>Boat Codec 有四种编码器:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Codec</literal>: 核心编码器接口;</simpara>
</listitem>
<listitem>
<simpara><literal>EncodeCodec</literal>: 普通编码器如 HEX, BASE64;</simpara>
</listitem>
<listitem>
<simpara><literal>DigestCodec</literal>: 摘要算法编码器如 MD5;</simpara>
</listitem>
<listitem>
<simpara><literal>MacCodec</literal>: 加密摘要编码器如 HmacMD5;</simpara>
</listitem>
<listitem>
<simpara><literal>CipherCodec</literal>: 加密算法编码器如 <literal>AES</literal>, <literal>RSA</literal>, <literal>SM2</literal>;</simpara>
</listitem>
</itemizedlist>
<simpara>有两种编码风格: <literal>静态调用风格</literal> 或者 <literal>链式调用风格</literal></simpara>
<section xml:id="_静态调用">
<title>静态调用:</title>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">class Example{
    @Test
    public void test() {
        RsaCodec rsaCodec = Codecs.rsaCodec();
        byte[] bytes = rsaCodec.encrypt(rsaKeyPair.publicKey(), data);
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">class Example {
    @Test
    fun test() {
        val rsaCodec = rsaCodec()
        val bytes = rsaCodec.encrypt(rsaKeyPair.publicKey, data)
    }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_链式调用">
<title>链式调用:</title>
<simpara>Using <literal>Codecing</literal>: Codec processing for chain operation.</simpara>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">class Example{
    @Test
    public void test() {
        Codecs.collect(messageBase64).decodeBase64().encryptAes(secretKey).doFinal();
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">class Example {
    @Test
    fun test() {
        messageBase64.codec().decodeBase64().encryptAes(secretKey).doFinal()
    }
}</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="_样例">
<title>样例</title>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.codec;

import org.testng.annotations.Test;
import xyz.srclab.common.codec.Codecs;
import xyz.srclab.common.codec.EncodeCodec;
import xyz.srclab.common.codec.aes.AesKeys;
import xyz.srclab.common.test.TestLogger;

import javax.crypto.SecretKey;

public class CodecSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testCodec() {
        String password = "hei, xiongdi, womenhaojiubujiannizainali";
        String messageBase64 = "aGVpLCBwZW5neW91LCBydWd1b3poZW5kZXNoaW5pcWluZ2Rhemhhb2h1";
        SecretKey secretKey = AesKeys.newKey(password);

        //Use static
        String message = EncodeCodec.base64().decodeToString(messageBase64);
        byte[] encrypt = Codecs.aesCodec().encrypt(secretKey, message);
        String decrypt = Codecs.aesCodec().decryptToString(secretKey, encrypt);
        //hei, pengyou, ruguozhendeshiniqingdazhaohu
        logger.log("decrypt: {}", decrypt);

        //Use chain
        encrypt = Codecs.codec(messageBase64).decodeBase64().encryptAes(secretKey).doFinal();
        decrypt = Codecs.codec(encrypt).decryptAes(secretKey).doFinalString();
        //hei, pengyou, ruguozhendeshiniqingdazhaohu
        logger.log("decrypt: {}", decrypt);
    }

    @Test
    public void testEncode() {
        logger.log(Codecs.hexString("123456789"));
        logger.log(Codecs.base64String("123456789"));
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.codec

import org.testng.annotations.Test
import xyz.srclab.common.codec.*
import xyz.srclab.common.codec.aes.toAesKey
import xyz.srclab.common.test.TestLogger

class CodecSample {

    @Test
    fun testCodec() {
        val password = "hei, xiongdi, womenhaojiubujiannizainali"
        val messageBase64 = "aGVpLCBwZW5neW91LCBydWd1b3poZW5kZXNoaW5pcWluZ2Rhemhhb2h1"
        val secretKey = password.toAesKey()

        //Use static
        val message: String = Base64Codec.decodeToString(messageBase64)
        var encrypt = aesCodec().encrypt(secretKey, message)
        var decrypt = aesCodec().decryptToString(secretKey, encrypt)
        //hei, pengyou, ruguozhendeshiniqingdazhaohu
        logger.log("decrypt: {}", decrypt)

        //Use chain
        encrypt = messageBase64.codec().decodeBase64().encryptAes(secretKey).doFinal()
        decrypt = encrypt.codec().decryptAes(secretKey).doFinalString()
        //hei, pengyou, ruguozhendeshiniqingdazhaohu
        logger.log("decrypt: {}", decrypt)
    }

    @Test
    fun testEncode() {
        logger.log("123456789".toHexString())
        logger.log("123456789".toBase64String())
    }

    companion object {
        private val logger = TestLogger.DEFAULT
    }
}</programlisting>
</para>
</formalpara>
</section>
</article>