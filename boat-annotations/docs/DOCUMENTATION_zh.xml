<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="3"?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title><inlinemediaobject>
<imageobject>
<imagedata fileref="../../logo.svg"/>
</imageobject>
<textobject><phrase>Boat Annotations</phrase></textobject>
</inlinemediaobject> <literal>boat-annotations</literal></title>
<subtitle>Boat Annotations&#8201;&#8212;&#8201;<link xl:href="../../README.md">Boat</link> 注解库</subtitle>
<date>2021-07-12</date>
<author>
<personname>
<firstname>Sun</firstname>
<surname>Qian</surname>
</personname>
<email>fredsuvn@163.com</email>
</author>
<authorinitials>SQ</authorinitials>
</info>
<simpara>Boat Annotations提供了许多可以让代码整洁又干净的注解:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">DefaultNonNull</emphasis>/<emphasis role="strong">DefaultNullable</emphasis>: 它说明注解范围内所有的变量, 属性, 参数和类型使用默认都是non-null/nullable的, 通常用在package-info.java中;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">NotNull</emphasis>/<emphasis role="strong">Nullable</emphasis>: 它说明被注解的变量, 属性, 参数和类型使用是non-null/nullable的;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">JavaBean</emphasis>: 它说明被注解的类型是一个javabean, 所有的属性默认都是nullable的;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Acceptable</emphasis>/<emphasis role="strong">Accepted</emphasis>: 它说明参数只能接受指定的几个类型;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Rejectable</emphasis>/<emphasis role="strong">Rejected</emphasis>: 它说明参数不接受指定的几个类型;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Written</emphasis>: 它说明参数可能被进行写操作;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Immutable</emphasis>: 它说明被注解的变量, 属性, 参数和类型使用是不可变和线程安全的;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">ThreadSafe</emphasis>: 它说明被注解的变量, 属性, 参数和类型使用是线程安全的;</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">ThreadSafeIf</emphasis>: 它说明被注解的变量, 属性, 参数和类型使用在满足指定条件的情况下是线程安全的;</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>.Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.annotations;

import org.testng.Assert;
import org.testng.annotations.Test;
import xyz.srclab.annotations.Accepted;
import xyz.srclab.annotations.JavaBean;
import xyz.srclab.annotations.NonNull;
import xyz.srclab.annotations.Written;

public class AnnotationSample {

    @Test
    public void testAnnotations() {
        TestBean testBean = new TestBean();
        Assert.assertEquals(testBean.getP2().substring(1), "2");
        Assert.expectThrows(NullPointerException.class, () -&gt; testBean.getP1().substring(1));

        StringBuilder buffer = new StringBuilder();
        writeBuffer(buffer, "123");
        Assert.assertEquals(buffer.toString(), "123");
    }

    private void writeBuffer(
        @Written StringBuilder buffer,
        @Accepted(String.class) @Accepted(StringBuffer.class) CharSequence readOnly
    ) {
        buffer.append(readOnly);
    }

    @JavaBean
    public static class TestBean {

        private String p1;
        @NonNull
        private String p2 = "p2";

        public String getP1() {
            return p1;
        }

        public void setP1(String p1) {
            this.p1 = p1;
        }

        @NonNull
        public String getP2() {
            return p2;
        }

        public void setP2(@NonNull String p2) {
            this.p2 = p2;
        }
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.annotations

import org.testng.Assert
import org.testng.annotations.Test
import xyz.srclab.annotations.Acceptable
import xyz.srclab.annotations.Accepted
import xyz.srclab.annotations.Written

class AnnotationSample {

    @Test
    fun testAnnotations() {
        val buffer = StringBuilder()
        buffer.writeBuffer("123")
        Assert.assertEquals(buffer.toString(), "123")
    }

    private fun @receiver:Written StringBuilder.writeBuffer(
        @Acceptable(
            Accepted(String::class),
            Accepted(StringBuffer::class),
        )
        readOnly: String
    ) {
        this.append(readOnly)
    }
}</programlisting>
</para>
</formalpara>
</article>