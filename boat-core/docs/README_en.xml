<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="3"?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title><inlinemediaobject>
<imageobject>
<imagedata fileref="../../logo.svg"/>
</imageobject>
<textobject><phrase>Boat Core</phrase></textobject>
</inlinemediaobject> <literal>boat-core</literal></title>
<subtitle>Boat Core&#8201;&#8212;&#8201;Core Lib of <link xl:href="../../README.md">Boat</link></subtitle>
<date>2021-07-11</date>
<author>
<personname>
<firstname>Sun</firstname>
<surname>Qian</surname>
</personname>
<email>fredsuvn@163.com</email>
</author>
<authorinitials>SQ</authorinitials>
</info>
<section xml:id="_introduction">
<title>Introduction</title>
<simpara>Boat core provides core interfaces, functions and utilities for <link xl:href="../../README.md">Boat</link>, including:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="_lang"/>: Base package, a serials of core and base interfaces and components;</simpara>
</listitem>
<listitem>
<simpara><xref linkend="_bean"/>: Bean package, supports fast and convenient operation for <literal>bean</literal>;</simpara>
</listitem>
<listitem>
<simpara><xref linkend="_convert"/>: Convert package, supports various types conversion each other;</simpara>
</listitem>
<listitem>
<simpara><xref linkend="_cache"/>: Cache package, provides core cache interfaces and built-in implementations;</simpara>
</listitem>
<listitem>
<simpara><xref linkend="_run"/>: Package about run and thread, provides <literal>Runner</literal> interfaces and implementations;</simpara>
</listitem>
<listitem>
<simpara><xref linkend="_bus"/>: Bus package, provides <literal>EventBus</literal> interfaces;</simpara>
</listitem>
<listitem>
<simpara><xref linkend="_invoke"/>: Provides <literal>Invoker</literal> interfaces and implementations;</simpara>
</listitem>
<listitem>
<simpara><xref linkend="_proxy"/>: Provides <literal>ProxyClass</literal> to proxy a class in runtime dynamically, by <literal>reflection</literal>, <literal>spring-core</literal> or <literal>cglib</literal> ways;</simpara>
</listitem>
<listitem>
<simpara><xref linkend="_state"/>: Provides <literal>State</literal> interfaces represents a state or status;</simpara>
</listitem>
<listitem>
<simpara><xref linkend="_exception"/>: About exceptions;</simpara>
</listitem>
<listitem>
<simpara><xref linkend="_collect"/>: Collection extension package, supports <literal>chain operation</literal>, <literal>multi-value-map</literal>, various utilities, etc.;</simpara>
</listitem>
<listitem>
<simpara><xref linkend="_reflect"/>: Reflection extension package, provides many convenient reflection operation;</simpara>
</listitem>
<listitem>
<simpara><xref linkend="_io"/>: Input/Output interfaces and utilities package;</simpara>
</listitem>
<listitem>
<simpara><xref linkend="_jvm"/>: Provides JVM underlying operations;</simpara>
</listitem>
<listitem>
<simpara><xref linkend="_utils"/>: Other convenient tools;</simpara>
</listitem>
<listitem>
<simpara><xref linkend="_test"/>: Provides interfaces and utilities for testing;</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_usage">
<title>Usage</title>
<section xml:id="_lang">
<title>Lang</title>
<simpara>Lang package provides a serials of core and base interfaces and components:</simpara>
<itemizedlist>
<listitem>
<simpara>Global system objects: <literal>Current</literal>, <literal>Defaults</literal>, <literal>Environment</literal>;</simpara>
</listitem>
<listitem>
<simpara>Lang syntax enhancement (mainly for Java): <literal>Let</literal>, <literal>Ref</literal>, <literal>Lazy</literal>, <literal>LazyString</literal>;</simpara>
</listitem>
<listitem>
<simpara>String/CharSequence functions: <literal>CharsFormat</literal>, <literal>CharsTemplate</literal>, <literal>NamingCase</literal>;</simpara>
</listitem>
<listitem>
<simpara>Special character support: <literal>CtlChars</literal>, <literal>EscChars</literal>, <literal>CsiChars</literal>, <literal>SgrChars</literal>;</simpara>
</listitem>
<listitem>
<simpara>Accessor interfaces: <literal>SingleAccessor</literal>, <literal>MapAccessor</literal>, <literal>GenericSingleAccessor</literal>, <literal>GenericMapAccessor</literal>;</simpara>
</listitem>
<listitem>
<simpara>Helper interfaces and utilities: SpecParser, CachingProductBuilder, Processing;</simpara>
</listitem>
<listitem>
<simpara>Common utilities: Anys, Bools, Chars, Nums, Dates, Randoms, RandomSupplier, Compares, Checks, Requires, Enums, Loaders.</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.core.lang;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.testng.Assert;
import org.testng.annotations.Test;
import xyz.srclab.common.lang.*;
import xyz.srclab.common.test.TestLogger;
import xyz.srclab.common.utils.Counter;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.IntStream;

public class LangSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testLet() {
        int sum = Let.of("1,2,3,4,5,6,7,8,9,10")
            .then(s -&gt; s.split(","))
            .then(Arrays::asList)
            .then(l -&gt; l.stream().mapToInt(Integer::parseInt))
            .then(IntStream::sum)
            .get();
        //55
        logger.log("sum: {}", sum);
    }

    @Test
    public void testRef() {
        Ref&lt;String&gt; ref = Ref.with("1");
        List&lt;String&gt; list = Arrays.asList("-1", "-2", "-3");

        //here &lt;String&gt; should be final without Ref
        list.forEach(i -&gt; ref.set(ref.get() + i));
        //1-1-2-3
        logger.log("result: {}", ref.get());
    }

    @Test
    public void testCurrent() {
        //null
        logger.log(Current.getOrNull("1"));
        Current.set("1", "2");
        //2
        logger.log(Current.get("1"));
        //System.currentTimeMillis();
        logger.log(Current.millis());
    }

    @Test
    public void testDefault() {
        //UTF-8
        logger.log(Defaults.charset());
        //Locale.getDefault();
        logger.log(Defaults.locale());
    }

    @Test
    public void testEnvironment() {
        logger.log(Environment.getProperty(Environment.OS_ARCH_KEY));
        logger.log(Environment.availableProcessors());
        logger.log(Environment.osVersion());
        logger.log(Environment.isOsWindows());
    }

    @Test
    public void testCharsFormat() {
        String byFast = CharsFormat.fastFormat("1, 2, {}", 3);
        String byMessage = CharsFormat.messageFormat("1, 2, {0}", 3);
        String byPrintf = CharsFormat.printfFormat("1, 2, %d", 3);
        //1, 2, 3
        logger.log("byFast: {}", byFast);
        logger.log("byMessage: {}", byMessage);
        logger.log("byPrintf: {}", byPrintf);
    }

    @Test
    public void testCharsTemplate() {
        Map&lt;Object, Object&gt; args = new HashMap&lt;&gt;();
        args.put("name", "Dog");
        args.put("name}", "DogX");
        args.put(1, "Cat");
        args.put(2, "Bird");
        CharsTemplate template1 = CharsTemplate.resolve(
            "This is a {name}, that is a {}", "{", "}");
        //This is a Dog, that is a Cat
        logger.log(template1.process(args));
        CharsTemplate template2 = CharsTemplate.resolve(
            "This is a } {name}, that is a {}}", "{", "}");
        //This is a } Dog, that is a Cat}
        logger.log(template2.process(args));
        CharsTemplate template3 = CharsTemplate.resolve(
            "This is a } \\{{name\\}} ({name}), that is a {}\\\\\\{\\", "{", "}", "\\");
        //This is a } {DogX (Dog), that is a Bird\{\
        logger.log(template3.process(args));
    }

    @Test
    public void testNamingCase() {
        String upperCamel = "UpperCamel";
        String lowerCamel = NamingCase.UPPER_CAMEL.convertTo(upperCamel, NamingCase.LOWER_CAMEL);
        //upperCamel
        logger.log("lowerCamel: {}", lowerCamel);
    }

    @Test
    public void testLazy() {
        Lazy&lt;String&gt; lazy = Lazy.of(() -&gt; UUID.randomUUID().toString());
        String value1 = lazy.get();
        String value2 = lazy.get();
        lazy.refresh();
        String value3 = lazy.get();
        //value1 == value2
        //value2 != value3
        logger.log("value1: {}", value1);
        logger.log("value2: {}", value2);
        logger.log("value3: {}", value3);
    }

    @Test
    public void testLazyString() {
        Counter counter = Counter.startsAt(0);
        LazyString&lt;Integer&gt; lazyString = LazyString.of(Lazy.of(counter::getAndIncrementInt));
        //0
        logger.log("lazyToString: {}", lazyString);
    }

    @Test
    public void testLoaders() {
        Class&lt;String[][][]&gt; cls = Loaders.loadClass("[[[Ljava.lang.String;");
        //class [[[Ljava.lang.String;
        logger.log("cls: {}", cls);
    }

    @Test
    public void testSpecParser() {
        String s = SpecParser.parseFirstClassNameToInstance("java.lang.String");
        //an empty String
        logger.log("s: {}", s);
    }

    @Test
    public void testBaseTypes() {

        //Anys examples:
        List&lt;String&gt;[] lists = Anys.as(new List[]{});
        int hash = Anys.anyOrArrayHash(Arrays.asList("", 1));
        boolean equals = Anys.anyOrArrayEquals(Arrays.asList("", 1), Arrays.asList("", 1));

        //Chars examples:
        byte[] bytes = "message10086".getBytes();
        String toChars = Chars.toChars(bytes);
        byte[] toBytes = Chars.toBytes(toChars);
        //message10086
        logger.log("toChars: {}", toChars);
        //[109, 101, 115, 115, 97, 103, 101, 49, 48, 48, 56, 54]
        logger.log("toBytes: {}", toBytes);

        //Nums examples:
        BigDecimal n = Nums.toBigDecimal("110");
        int i = Nums.toInt(new BigDecimal("2333"));
        //110
        logger.log("n: {}", n);
        //2333
        logger.log("i: {}", i);

        //Bools examples:
        boolean b = Bools.toBoolean("true");
        //true
        logger.log("b: {}", b);

        //Dates examples:
        String timestamp = Dates.timestamp();
        LocalDateTime localDateTime = Dates.toLocalDateTime("2011-12-03T10:15:30");
        //20210207144816045
        logger.log("timestamp: {}", timestamp);
        //2011-12-03T10:15:30
        logger.log("localDateTime: {}", localDateTime);

        //Compares example:
        //99
        logger.log("inBounds: {}", Compares.inBounds(100, 0, 99));

        //Checks examples:
        try {
            Checks.checkArgument(1 == 2, "1 != 2");
        } catch (IllegalArgumentException e) {
            //java.lang.IllegalArgumentException: 1 != 2
            logger.log("e: {}", e);
        }

        //Requires examples:
        try {
            Object notNull = Requires.notNull(null, "null");
        } catch (NullPointerException e) {
            //java.lang.NullPointerException: null
            logger.log("e: {}", e);
        }

        //Enums examples:
        TestEnum t1 = Enums.value(TestEnum.class, "T1");
        //t1: T1
        logger.log("t1: {}", t1);
        TestEnum t2 = Enums.valueIgnoreCase(TestEnum.class, "t2");
        //t2: T2
        logger.log("t2: {}", t2);
    }

    @Test
    public void testRandom() {
        //[10, 20)
        for (int j = 0; j &lt; 10; j++) {
            logger.log("random[10, 20): {}", Randoms.between(10, 20));
        }

        RandomSupplier&lt;?&gt; randomSupplier = RandomSupplier.newBuilder()
            .mayBe(20, "A")
            .mayBe(20, "B")
            .mayBe(60, "C")
            .build();
        int countA = 0;
        int countB = 0;
        int countC = 0;
        for (int i = 0; i &lt; 1000; i++) {
            Object result = randomSupplier.get();
            if (result.equals("A")) {
                countA++;
            } else if (result.equals("B")) {
                countB++;
            } else if (result.equals("C")) {
                countC++;
            }
        }
        int total = countA + countB + countC;
        Assert.assertEquals(total, 1000);
        //countA: 189, countB: 190, countC: 621, total: 1000
        logger.log("countA: {}, countB: {}, countC: {}, total: {}", countA, countB, countC, total);
    }

    @Test
    public void testCachingProductBuilder() {

        class CachingBuilderSample extends CachingProductBuilder&lt;String&gt; {

            private String value = "null";
            private long counter = 0L;

            public void setValue(String value) {
                this.value = value;
                this.commitModification();
            }

            @NotNull
            @Override
            protected String buildNew() {
                return value + counter++;
            }
        }

        CachingBuilderSample cachingBuilderSample = new CachingBuilderSample();
        cachingBuilderSample.setValue("1");
        String value1 = cachingBuilderSample.build();
        String value2 = cachingBuilderSample.build();
        cachingBuilderSample.setValue("2");
        String value3 = cachingBuilderSample.build();
        //10
        logger.log("value1: {}", value1);
        //10
        logger.log("value2: {}", value2);
        //21
        logger.log("value3: {}", value3);
    }

    @Test
    public void testProcess() {
        if (Environment.isOsUnix()) {
            testProcessing("echo", "ECHO_CONTENT");
        }
        if (Environment.isOsWindows()) {
            testProcessing("cmd.exe", "/c", "echo " + "ECHO_CONTENT");
        }
    }

    private void testProcessing(String... command) {
        Processing processing = Processing.newProcessing(command);
        processing.waitForTermination();
        String output = processing.outputString();
        //ECHO_CONTENT
        logger.log(output);
    }

    @Test
    public void testShell() {
        logger.log("Hello, world!");
        logger.log("123{}456{}{}", EscChars.linefeed(), EscChars.newline(), EscChars.reset());
        logger.log("{}{}{}",
            SgrChars.foregroundRed("red"),
            SgrChars.backgroundCyan(" "),
            SgrChars.foregroundGreen("green")
        );
        logger.log("{}{}{}",
            SgrChars.withParam("bright red", SgrParam.FOREGROUND_BRIGHT_RED),
            SgrChars.backgroundCyan(" "),
            SgrChars.withParam("bright green", SgrParam.FOREGROUND_BRIGHT_GREEN)
        );
        logger.log("{}{}{}",
            SgrChars.withParam("color 8", SgrParam.foregroundColor(8)),
            SgrChars.backgroundCyan(" "),
            SgrChars.withParam("rgb(100, 100, 50)", SgrParam.foregroundColor(100, 100, 50))
        );
        logger.log(CtlChars.beep());
        logger.log("123\010456\007");
        logger.log("123{}456{}", CtlChars.backspaces(), CtlChars.beep());
    }

    @Test
    public void testSingleAccessor() {
        TestSingleAccessor singleAccessor = new TestSingleAccessor();
        Assert.assertNull(singleAccessor.getOrNull());
        Assert.assertEquals("666", singleAccessor.getOrElse("666"));
        Assert.assertEquals("666", singleAccessor.getOrElse(() -&gt; "666"));
        singleAccessor.set("777");
        Assert.assertEquals("777", singleAccessor.get());

        TestGenericSingleAccessor genericSingleAccessor = new TestGenericSingleAccessor();
        Assert.assertNull(genericSingleAccessor.getOrNull());
        Assert.assertEquals("666", genericSingleAccessor.getOrElse("666"));
        Assert.assertEquals("666", genericSingleAccessor.getOrElse(() -&gt; "666"));
        genericSingleAccessor.set("777");
        Assert.assertEquals("777", genericSingleAccessor.get());

        TestMapAccessor mapAccessor = new TestMapAccessor();
        Assert.assertNull(mapAccessor.getOrNull("1"));
        Assert.assertEquals("666", mapAccessor.getOrElse("1", "666"));
        Assert.assertEquals("666", mapAccessor.getOrElse("1", (k) -&gt; "666"));
        mapAccessor.set("1", "777");
        Assert.assertEquals("777", mapAccessor.get("1"));

        TestGenericMapAccessor genericMapAccessor = new TestGenericMapAccessor();
        Assert.assertNull(genericMapAccessor.getOrNull("1"));
        Assert.assertEquals("666", genericMapAccessor.getOrElse("1", "666"));
        Assert.assertEquals("666", genericMapAccessor.getOrElse("1", (k) -&gt; "666"));
        genericMapAccessor.set("1", "777");
        Assert.assertEquals("777", genericMapAccessor.get("1"));
    }

    public enum TestEnum {
        T1,
        T2
    }

    public static class TestSingleAccessor implements SingleAccessor {

        private String value;

        @Override
        public &lt;T&gt; T getOrNull() {
            return (T) value;
        }

        @Override
        public void set(@Nullable Object value) {
            this.value = (String) value;
        }
    }

    public static class TestGenericSingleAccessor implements GenericSingleAccessor&lt;String&gt; {

        private String value;

        @Override
        public String getOrNull() {
            return value;
        }

        @Override
        public void set(@Nullable String value) {
            this.value = value;
        }
    }

    public static class TestMapAccessor implements MapAccessor {

        private final Map&lt;Object, Object&gt; values = new HashMap&lt;&gt;();

        @Override
        public @NotNull Map&lt;Object, Object&gt; contents() {
            return values;
        }
    }

    public static class TestGenericMapAccessor implements GenericMapAccessor&lt;String, String&gt; {

        private final Map&lt;String, String&gt; values = new HashMap&lt;&gt;();

        @Override
        public @NotNull Map&lt;String, String&gt; contents() {
            return values;
        }
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.core.lang

import org.testng.Assert
import org.testng.annotations.Test
import xyz.srclab.common.lang.*
import xyz.srclab.common.lang.CharsFormat.Companion.fastFormat
import xyz.srclab.common.lang.CharsFormat.Companion.messageFormat
import xyz.srclab.common.lang.CharsFormat.Companion.printfFormat
import xyz.srclab.common.lang.CharsTemplate.Companion.resolveTemplate
import xyz.srclab.common.lang.LazyString.Companion.toLazyString
import xyz.srclab.common.lang.Processing.Companion.newProcessing
import xyz.srclab.common.lang.SpecParser.Companion.parseFirstClassNameToInstance
import xyz.srclab.common.test.TestLogger
import xyz.srclab.common.utils.Counter.Companion.counterStarts
import java.math.BigDecimal
import java.util.*
import kotlin.text.toBigDecimal
import kotlin.text.toBoolean

class BaseSample {

    @Test
    fun testCurrent() {
        //null
        logger.log(Current.getOrNull("1"))
        Current.set("1", "2")
        //2
        logger.log(Current.get&lt;Any&gt;("1"))
        //System.currentTimeMillis();
        logger.log(Current.millis)
    }

    @Test
    fun testDefault() {
        //UTF-8
        logger.log(Defaults.charset)
        //Locale.getDefault();
        logger.log(Defaults.locale)
    }

    @Test
    fun testEnvironment() {
        logger.log(Environment.getProperty(Environment.OS_ARCH_KEY))
        logger.log(Environment.availableProcessors)
        logger.log(Environment.osVersion)
        logger.log(Environment.isOsWindows)
    }

    @Test
    fun testCharsFormat() {
        val byFast = "1, 2, {}".fastFormat(3)
        val byMessage = "1, 2, {0}".messageFormat(3)
        val byPrintf = "1, 2, %d".printfFormat(3)
        //1, 2, 3
        logger.log("byFast: {}", byFast)
        logger.log("byMessage: {}", byMessage)
        logger.log("byPrintf: {}", byPrintf)
    }

    @Test
    fun testCharsTemplate() {
        val args: MutableMap&lt;Any, Any?&gt; = HashMap()
        args["name"] = "Dog"
        args["name}"] = "DogX"
        args[1] = "Cat"
        args[2] = "Bird"
        val template1 = "This is a {name}, that is a {}".resolveTemplate("{", "}")
        //This is a Dog, that is a Cat
        logger.log(template1.process(args))
        val template2 = "This is a } {name}, that is a {}}".resolveTemplate("{", "}")
        //This is a } Dog, that is a Cat}
        logger.log(template2.process(args))
        val template3 = "This is a } \\{{name\\}} ({name}), that is a {}\\\\\\{\\".resolveTemplate("{", "}", "\\")
        //This is a } {DogX (Dog), that is a Bird\{\
        logger.log(template3.process(args))
    }

    @Test
    fun testNamingCase() {
        val upperCamel = "UpperCamel"
        val lowerCamel = NamingCase.UPPER_CAMEL.convertTo(upperCamel, NamingCase.LOWER_CAMEL)
        //upperCamel
        logger.log("lowerCamel: {}", lowerCamel)
    }

    @Test
    fun testLazyString() {
        val counter = 0.counterStarts()
        val lazyToString = lazyOf { counter.getAndIncrementInt() }.toLazyString()
        //0
        logger.log("lazyToString: {}", lazyToString)
    }

    @Test
    fun testLoaders() {
        val cls = "[[[Ljava.lang.String;".loadClass&lt;Array&lt;Array&lt;Array&lt;String&gt;&gt;&gt;&gt;()
        //class [[[Ljava.lang.String;
        logger.log("cls: {}", cls)
    }

    @Test
    fun testSpecParser() {
        val s = "java.lang.String".parseFirstClassNameToInstance&lt;String&gt;()
        //an empty String
        logger.log("s: {}", s)
    }

    @Test
    fun testBaseTypes() {

        //Anys examples:
        val lists = arrayOf&lt;List&lt;*&gt;&gt;().asAny&lt;Array&lt;List&lt;String&gt;&gt;&gt;()
        val hash = Arrays.asList("", 1).anyOrArrayHash()
        val equals = Arrays.asList("", 1).anyOrArrayEquals(Arrays.asList("", 1))

        //Chars examples:
        val bytes = "message10086".toByteArray()
        val toChars = bytes.toChars()
        val toBytes = toChars.toBytes()
        //message10086
        logger.log("toChars: {}", toChars)
        //[109, 101, 115, 115, 97, 103, 101, 49, 48, 48, 56, 54]
        logger.log("toBytes: {}", toBytes)

        //Nums examples:
        val n = "110".toBigDecimal()
        val i = BigDecimal("2333").toInt()
        //110
        logger.log("n: {}", n)
        //2333
        logger.log("i: {}", i)

        //Bools examples:
        val b = "true".toBoolean()
        //true
        logger.log("b: {}", b)

        //Dates examples:
        val timestamp = timestamp()
        val localDateTime = "2011-12-03T10:15:30".toLocalDateTime()
        //20210207144816045
        logger.log("timestamp: {}", timestamp)
        //2011-12-03T10:15:30
        logger.log("localDateTime: {}", localDateTime)

        //Compares example:
        //99
        logger.log("inBounds: {}", 100.inBounds(0, 99))

        //Checks examples:
        try {
            checkArgument(1 == 2, "1 != 2")
        } catch (e: IllegalArgumentException) {
            //java.lang.IllegalArgumentException: 1 != 2
            logger.log("e: {}", e)
        }

        //Requires examples:
        try {
            val notNull = null.notNull&lt;Any&gt;("null")
        } catch (e: NullPointerException) {
            //java.lang.NullPointerException: null
            logger.log("e: {}", e)
        }

        //Enums examples:
        val t1: TestEnum = TestEnum::class.java.valueOfEnum("T1")
        //t1: T1
        logger.log("t1: {}", t1)
        val t2: TestEnum = TestEnum::class.java.valueOfEnumIgnoreCase("t2")
        //t2: T2
        logger.log("t2: {}", t2)
    }


    @Test
    fun testRandom() {
        //[10, 20)
        for (j in 0..9) {
            logger.log("random[10, 20): {}", randomBetween(10, 20))
        }

        val randomSupplier = RandomSupplier.newBuilder&lt;Any&gt;()
            .mayBe(20, "A")
            .mayBe(20, "B")
            .mayBe(60, "C")
            .build()
        var countA = 0
        var countB = 0
        var countC = 0
        for (i in 0..999) {
            val result = randomSupplier.get()
            if (result == "A") {
                countA++
            } else if (result == "B") {
                countB++
            } else if (result == "C") {
                countC++
            }
        }
        val total = countA + countB + countC
        Assert.assertEquals(total, 1000)
        //countA: 189, countB: 190, countC: 621, total: 1000
        logger.log("countA: {}, countB: {}, countC: {}, total: {}", countA, countB, countC, total)
    }

    @Test
    fun testCachingProductBuilder() {

        class CachingBuilderSample : CachingProductBuilder&lt;String&gt;() {

            private var value = "null"
            private var counter = 0L

            fun setValue(value: String) {
                this.value = value
                commitModification()
            }

            override fun buildNew(): String {
                return "$value${counter++}"
            }
        }

        val cachingBuilderSample = CachingBuilderSample()
        cachingBuilderSample.setValue("1")
        val value1 = cachingBuilderSample.build()
        val value2 = cachingBuilderSample.build()
        cachingBuilderSample.setValue("2")
        val value3 = cachingBuilderSample.build()
        //10
        logger.log("value1: {}", value1)
        //10
        logger.log("value2: {}", value2)
        //21
        logger.log("value3: {}", value3)
    }

    @Test
    fun testProcess() {
        if (Environment.isOsUnix) {
            testProcessing("echo", "ECHO_CONTENT")
        }
        if (Environment.isOsWindows) {
            testProcessing("cmd.exe", "/c", "echo " + "ECHO_CONTENT")
        }
    }

    private fun testProcessing(vararg command: String) {
        val processing = newProcessing(*command)
        processing.waitForTermination()
        val output = processing.outputString()
        //ECHO_CONTENT
        logger.log(output)
    }

    @Test
    fun testShell() {
        logger.log("Hello, world!")
        logger.log("123{}456{}{}", EscChars.linefeed, EscChars.newline, EscChars.reset)
        logger.log(
            "{}{}{}",
            SgrChars.foregroundRed("red"),
            SgrChars.backgroundCyan(" "),
            SgrChars.foregroundGreen("green")
        )
        logger.log(
            "{}{}{}",
            SgrChars.withParam("bright red", SgrParam.FOREGROUND_BRIGHT_RED),
            SgrChars.backgroundCyan(" "),
            SgrChars.withParam("bright green", SgrParam.FOREGROUND_BRIGHT_GREEN)
        )
        logger.log(
            "{}{}{}",
            SgrChars.withParam("color 8", SgrParam.foregroundColor(8)),
            SgrChars.backgroundCyan(" "),
            SgrChars.withParam("rgb(100, 100, 50)", SgrParam.foregroundColor(100, 100, 50))
        )
        logger.log(CtlChars.beep)
        //logger.log("123\010456\007");
        logger.log("123{}456{}", CtlChars.backspaces, CtlChars.beep)
    }

    @Test
    fun testSingleAccessor() {
        val singleAccessor = TestSingleAccessor()
        Assert.assertNull(singleAccessor.getOrNull())
        Assert.assertEquals("666", singleAccessor.getOrElse("666"))
        Assert.assertEquals("666", singleAccessor.getOrElse { "666" })
        singleAccessor.set("777")
        Assert.assertEquals("777", singleAccessor.get())
        val genericSingleAccessor = TestGenericSingleAccessor()
        Assert.assertNull(genericSingleAccessor.getOrNull())
        Assert.assertEquals("666", genericSingleAccessor.getOrElse("666"))
        Assert.assertEquals("666", genericSingleAccessor.getOrElse { "666" })
        genericSingleAccessor.set("777")
        Assert.assertEquals("777", genericSingleAccessor.get())
        val mapAccessor = TestMapAccessor()
        Assert.assertNull(mapAccessor.getOrNull("1"))
        Assert.assertEquals("666", mapAccessor.getOrElse("1", "666"))
        Assert.assertEquals("666", mapAccessor.getOrElse("1") { k: Any? -&gt; "666" })
        mapAccessor.set("1", "777")
        Assert.assertEquals("777", mapAccessor.get("1"))
        val genericMapAccessor = TestGenericMapAccessor()
        Assert.assertNull(genericMapAccessor.getOrNull("1"))
        Assert.assertEquals("666", genericMapAccessor.getOrElse("1", "666"))
        Assert.assertEquals("666", genericMapAccessor.getOrElse("1") { k: String? -&gt; "666" })
        genericMapAccessor.set("1", "777")
        Assert.assertEquals("777", genericMapAccessor.get("1"))
    }

    companion object {
        private val logger = TestLogger.DEFAULT
    }
}

enum class TestEnum {
    T1, T2
}

class TestSingleAccessor : SingleAccessor {
    private var value: String? = null
    override fun &lt;T : Any&gt; getOrNull(): T? {
        return value as T?
    }

    override fun set(value: Any?) {
        this.value = value as String?
    }
}

class TestGenericSingleAccessor : GenericSingleAccessor&lt;String&gt; {
    private var value: String? = null
    override fun getOrNull(): String? {
        return value
    }

    override fun set(value: String?) {
        this.value = value
    }
}

class TestMapAccessor : MapAccessor {
    private val values: MutableMap&lt;Any, Any?&gt; = HashMap()
    override val contents: MutableMap&lt;Any, Any?&gt; = values
}

class TestGenericMapAccessor : GenericMapAccessor&lt;String, String&gt; {
    private val values: MutableMap&lt;String, String?&gt; = HashMap()
    override val contents: MutableMap&lt;String, String?&gt; = values
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_bean">
<title>Bean</title>
<simpara>Bean package supports fast and convenient operation for <literal>bean</literal>:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Beans</literal>: Default utilities for bean operation;</simpara>
</listitem>
<listitem>
<simpara><literal>BeanResolver</literal>: Core Interface to resolve <literal>bean</literal>, <literal>Beans</literal> use its default implementation;</simpara>
</listitem>
<listitem>
<simpara><literal>BeanResolveHandler</literal>: Handler to process resolving for <literal>BeanResolver</literal>;</simpara>
</listitem>
<listitem>
<simpara><literal>BeanMap</literal>: A type of <literal>Map</literal> implementation that associated with a <literal>bean</literal>, means make a <literal>bean</literal> as a <literal>Map</literal>;</simpara>
</listitem>
<listitem>
<simpara><literal>BeanType</literal>: To describe struct of a type of <literal>bean</literal> like <literal>Class</literal>;</simpara>
</listitem>
<listitem>
<simpara><literal>PropertyType</literal>: To describe a property of <literal>bean</literal> like <literal>Field</literal>;</simpara>
</listitem>
</itemizedlist>
<tip>
<simpara><literal>Beans</literal> is more than 20 times faster than <literal>Apache BeanUtils</literal> in copy-properties function.</simpara>
</tip>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.core.bean;

import org.testng.annotations.Test;
import xyz.srclab.common.bean.Beans;
import xyz.srclab.common.test.TestLogger;

public class BeanSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testBean() {
        A a = new A();
        a.setP1("1");
        a.setP2("2");
        B b = Beans.copyProperties(a, new B());
        int b1 = b.getP1();
        int b2 = b.getP2();
        //1
        logger.log("b1: {}", b1);
        //2
        logger.log("b1: {}", b2);
    }

    public static class A {
        private String p1;
        private String p2;

        public String getP1() {
            return p1;
        }

        public void setP1(String p1) {
            this.p1 = p1;
        }

        public String getP2() {
            return p2;
        }

        public void setP2(String p2) {
            this.p2 = p2;
        }
    }

    public static class B {
        private int p1;
        private int p2;

        public int getP1() {
            return p1;
        }

        public void setP1(int p1) {
            this.p1 = p1;
        }

        public int getP2() {
            return p2;
        }

        public void setP2(int p2) {
            this.p2 = p2;
        }
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.core.bean

import org.testng.annotations.Test
import xyz.srclab.common.bean.copyProperties
import xyz.srclab.common.test.TestLogger

class BeanSample {

    @Test
    fun testBean() {
        val a = A()
        a.p1 = "1"
        a.p2 = "2"
        val b = a.copyProperties(B())
        val b1 = b.p1
        val b2 = b.p2
        //1
        logger.log("b1: {}", b1)
        //2
        logger.log("b1: {}", b2)
    }

    class A {
        var p1: String? = null
        var p2: String? = null
    }

    class B {
        var p1 = 0
        var p2 = 0
    }

    companion object {
        private val logger = TestLogger.DEFAULT
    }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_convert">
<title>Convert</title>
<simpara>Convert package supports various types conversion each other:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Converts</literal>: Default utilities for type conversion operation;</simpara>
</listitem>
<listitem>
<simpara><literal>Converter</literal>: Core interfaces for type conversion, <literal>Converts</literal> use its default implementation;</simpara>
</listitem>
<listitem>
<simpara><literal>ConvertHandler</literal>: Handler to process converting for <literal>Converter</literal>;</simpara>
</listitem>
<listitem>
<simpara><literal>FastConverter</literal>: A fast type converter which must specify the target type;</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.core.convert;

import org.jetbrains.annotations.NotNull;
import org.testng.annotations.Test;
import xyz.srclab.common.convert.Converts;
import xyz.srclab.common.convert.FastConvertHandler;
import xyz.srclab.common.convert.FastConverter;
import xyz.srclab.common.test.TestLogger;

import java.util.Arrays;

public class ConvertSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testConvert() {
        String s = Converts.convert(123, String.class);
        //123
        logger.log("s: {}", s);

        A a = new A();
        a.setP1("1");
        a.setP2("2");
        B b = Converts.convert(a, B.class);
        //1
        logger.log("b1: {}", b.getP1());
        //2
        logger.log("b1: {}", b.getP2());

        FastConverter fastConverter = FastConverter.newFastConverter(
            Arrays.asList(new IntToStringConvertHandler(), new NumberToStringConvertHandler()));
        //I123
        logger.log(fastConverter.convert(123, String.class));
        //N123
        logger.log(fastConverter.convert(123L, String.class));
    }

    public static class A {
        private String p1;
        private String p2;

        public String getP1() {
            return p1;
        }

        public void setP1(String p1) {
            this.p1 = p1;
        }

        public String getP2() {
            return p2;
        }

        public void setP2(String p2) {
            this.p2 = p2;
        }
    }

    public static class B {
        private int p1;
        private int p2;

        public int getP1() {
            return p1;
        }

        public void setP1(int p1) {
            this.p1 = p1;
        }

        public int getP2() {
            return p2;
        }

        public void setP2(int p2) {
            this.p2 = p2;
        }
    }

    private static class IntToStringConvertHandler implements FastConvertHandler&lt;Integer, String&gt; {

        @NotNull
        @Override
        public Class&lt;?&gt; fromType() {
            return Integer.class;
        }

        @NotNull
        @Override
        public Class&lt;?&gt; toType() {
            return String.class;
        }

        @NotNull
        @Override
        public String convert(@NotNull Integer from) {
            return "I" + from;
        }
    }

    private static class NumberToStringConvertHandler implements FastConvertHandler&lt;Number, String&gt; {

        @NotNull
        @Override
        public Class&lt;?&gt; fromType() {
            return Number.class;
        }

        @NotNull
        @Override
        public Class&lt;?&gt; toType() {
            return String.class;
        }

        @NotNull
        @Override
        public String convert(@NotNull Number from) {
            return "N" + from;
        }
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.core.convert

import org.testng.annotations.Test
import xyz.srclab.common.convert.FastConvertHandler
import xyz.srclab.common.convert.FastConverter
import xyz.srclab.common.convert.convert
import xyz.srclab.common.test.TestLogger

class ConvertSample {

    @Test
    fun testConvert() {
        val s = 123.convert(String::class.java)
        //123
        logger.log("s: {}", s)
        val a = A()
        a.p1 = "1"
        a.p2 = "2"
        val b = a.convert(
            B::class.java
        )
        //1
        logger.log("b1: {}", b.p1)
        //2
        logger.log("b1: {}", b.p2)

        val fastConverter =
            FastConverter.newFastConverter(listOf(IntToStringConvertHandler, NumberToStringConvertHandler))
        //I123
        logger.log(fastConverter.convert(123, String::class.java))
        //N123
        logger.log(fastConverter.convert(123L, String::class.java))
    }


    companion object {
        private val logger = TestLogger.DEFAULT
    }
}

class A {
    var p1: String? = null
    var p2: String? = null
}

class B {
    var p1 = 0
    var p2 = 0
}

private object IntToStringConvertHandler : FastConvertHandler&lt;Int, String&gt; {
    override val fromType: Class&lt;*&gt; = Int::class.java
    override val toType: Class&lt;*&gt; = String::class.java
    override fun convert(from: Int): String {
        return "I$from"
    }
}

private object NumberToStringConvertHandler : FastConvertHandler&lt;Number, String&gt; {
    override val fromType: Class&lt;*&gt; = Number::class.java
    override val toType: Class&lt;*&gt; = String::class.java
    override fun convert(from: Number): String {
        return "N$from"
    }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_cache">
<title>Cache</title>
<simpara>Cache package provides core cache interfaces and built-in implementations:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Cache</literal>: Core Cache interface;</simpara>
</listitem>
<listitem>
<simpara><literal>FastCache</literal>: Implementation by <literal>WeakHashMap</literal> and <literal>ThreadLocal</literal>;</simpara>
</listitem>
<listitem>
<simpara><literal>CaffeineCache</literal>: Implementation by <literal>Caffeine</literal>;</simpara>
</listitem>
<listitem>
<simpara><literal>GuavaCache</literal>: Implementation by <literal>Guava</literal>;</simpara>
</listitem>
<listitem>
<simpara><literal>MapCache</literal>: Implementation by <literal>Map</literal>, means make <literal>Map</literal> as <literal>Cache</literal>;</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.core.cache;

import org.testng.annotations.Test;
import xyz.srclab.common.cache.Cache;
import xyz.srclab.common.test.TestLogger;

public class CacheSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testCache() {
        Cache&lt;String, String&gt; cache = Cache.newFastCache();
        cache.getOrLoad("1", k -&gt; k);
        //1
        logger.log("1: {}", cache.get("1"));
        //null
        logger.log("2: {}", cache.getOrNull("2"));
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.core.cache

import org.testng.annotations.Test
import xyz.srclab.common.cache.Cache
import xyz.srclab.common.test.TestLogger

class CacheSample {

    @Test
    fun testCache() {
        val cache = Cache.newFastCache&lt;String, String&gt;()
        cache.getOrLoad("1") { k: String -&gt; k }
        //1
        logger.log("1: {}", cache.get("1"))
        //null
        logger.log("2: {}", cache.getOrNull("2"))
    }

    companion object {
        private val logger = TestLogger.DEFAULT
    }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_run">
<title>Run</title>
<simpara>Run package is about run and thread, provides <literal>Runner</literal> interfaces and implementations:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Runner</literal>: Core interface to run threads;</simpara>
</listitem>
<listitem>
<simpara><literal>Running</literal>: Core interface represents a running thread;</simpara>
</listitem>
<listitem>
<simpara><literal>Scheduler</literal>: Core interface to schedule tasks;</simpara>
</listitem>
<listitem>
<simpara><literal>Scheduling</literal>: Core interface represents a scheduling task;</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.core.run;

import org.testng.Assert;
import org.testng.annotations.Test;
import xyz.srclab.common.lang.Current;
import xyz.srclab.common.lang.IntRef;
import xyz.srclab.common.run.*;
import xyz.srclab.common.test.TestLogger;

import java.time.Duration;
import java.util.concurrent.CountDownLatch;

public class RunSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testRunner() {
        Runner runner = Runner.SYNC_RUNNER;
        IntRef intRef = IntRef.with(0);
        Running&lt;?&gt; running = runner.run(() -&gt; {
            intRef.set(666);
            return null;
        });
        running.get();
        //666
        logger.log("int: {}", intRef.get());
    }

    @Test
    public void testScheduledRunner() {
        Scheduler scheduler = Scheduler.DEFAULT_THREAD_SCHEDULER;
        IntRef intRef = IntRef.with(0);
        Scheduling&lt;?&gt; scheduling = scheduler.scheduleFixedDelay(Duration.ZERO, Duration.ofMillis(1000), () -&gt; {
            intRef.set(intRef.get() + 100);
            return null;
        });
        Current.sleep(2500);
        scheduling.cancel(false);
        //300
        logger.log("int: {}", intRef.get());
    }

    @Test
    public void testRunContext() throws Exception {
        RunContext runContext = RunContext.current();
        runContext.set("1", "666");
        Assert.assertEquals("666", runContext.get("1"));
        RunContext.Attach attach = runContext.attach();
        CountDownLatch countDownLatch = new CountDownLatch(1);
        Runner.ASYNC_RUNNER.run(() -&gt; {
            RunContext detach = RunContext.current();
            detach.detach(attach);
            Assert.assertEquals("666", detach.get("1"));
            countDownLatch.countDown();
        });
        countDownLatch.await();
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.core.run

import org.testng.Assert
import org.testng.annotations.Test
import xyz.srclab.common.lang.Current.sleep
import xyz.srclab.common.lang.IntRef.Companion.withRef
import xyz.srclab.common.run.*
import xyz.srclab.common.run.RunContext.Companion.current
import xyz.srclab.common.test.TestLogger
import java.time.Duration
import java.util.concurrent.CountDownLatch

class RunSample {

    @Test
    fun testRunner() {
        val runner: Runner = Runner.SYNC_RUNNER
        val intRef = 0.withRef()
        val running: Running&lt;*&gt; = runner.run&lt;Any?&gt; {
            intRef.set(666)
            null
        }
        running.get()
        //666
        logger.log("int: {}", intRef.get())
    }

    @Test
    fun testScheduledRunner() {
        val scheduler = Scheduler.DEFAULT_THREAD_SCHEDULER
        val intRef = 0.withRef()
        val scheduling: Scheduling&lt;*&gt; = scheduler.scheduleFixedDelay&lt;Any?&gt;(Duration.ZERO, Duration.ofMillis(1000)) {
            intRef.set(intRef.get() + 100)
            null
        }
        sleep(2500)
        scheduling.cancel(false)
        //300
        logger.log("int: {}", intRef.get())
    }

    @Test
    @Throws(Exception::class)
    fun testRunContext() {
        val runContext = current()
        runContext.set("1", "666")
        Assert.assertEquals("666", runContext.get("1"))
        val attach = runContext.attach()
        val countDownLatch = CountDownLatch(1)
        AsyncRunner.run {
            val detach = current()
            detach.detach(attach)
            Assert.assertEquals("666", detach.get("1"))
            countDownLatch.countDown()
        }
        countDownLatch.await()
    }

    companion object {
        private val logger = TestLogger.DEFAULT
    }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_bus">
<title>Bus</title>
<simpara>Bus package provides <literal>EventBus</literal> interfaces:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>EventBus</literal>: Event bus interface and implementations;</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.core.bus;

import org.testng.annotations.Test;
import xyz.srclab.common.bus.EventBus;
import xyz.srclab.common.bus.Subscribe;
import xyz.srclab.common.lang.Next;
import xyz.srclab.common.test.TestLogger;

public class EventBusSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testEventBus() {
        EventBus eventBus = EventBus.newEventBus();
        Handler1 handler1 = new Handler1();
        eventBus.register(handler1);
        eventBus.post("123");
        //sub3sub2sub0 or sub0sub3sub2
        logger.log("subs: " + handler1.stack);
        eventBus.unregister(handler1);
    }

    public static class Handler1 {

        public String stack = "";

        @Subscribe(priority = 100)
        public void sub0(CharSequence chars) {
            logger.log("sub0:" + chars);
            stack += "sub0";
        }

        @Subscribe
        public void sub1(String chars) {
            logger.log("sub1:" + chars);
            stack += "sub1";
        }

        @Subscribe(priority = 100)
        public Next sub2(String chars) {
            logger.log("sub2:" + chars);
            stack += "sub2";
            return Next.BREAK;
        }

        @Subscribe(priority = 200)
        public void sub3(String chars) {
            logger.log("sub3:" + chars);
            stack += "sub3";
        }
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.core.bus

import org.testng.annotations.Test
import xyz.srclab.common.bus.EventBus
import xyz.srclab.common.bus.Subscribe
import xyz.srclab.common.lang.Next
import xyz.srclab.common.test.TestLogger

class EventBusSample {

    @Test
    fun testEventBus() {
        val eventBus = EventBus.newEventBus()
        val handler1 = Handler1()
        eventBus.register(handler1)
        eventBus.post("123")
        //sub3sub2sub0 or sub0sub3sub2
        logger.log("subs: " + handler1.stack)
        eventBus.unregister(handler1)
    }

    class Handler1 {

        var stack = ""

        @Subscribe(priority = 100)
        fun sub0(chars: CharSequence) {
            logger.log("sub0:$chars")
            stack += "sub0"
        }

        @Subscribe
        fun sub1(chars: String) {
            logger.log("sub1:$chars")
            stack += "sub1"
        }

        @Subscribe(priority = 100)
        fun sub2(chars: String): Next {
            logger.log("sub2:$chars")
            stack += "sub2"
            return Next.BREAK
        }

        @Subscribe(priority = 200)
        fun sub3(chars: String) {
            logger.log("sub3:$chars")
            stack += "sub3"
        }
    }

    companion object {
        private val logger = TestLogger.DEFAULT
    }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_invoke">
<title>Invoke</title>
<simpara>Invoke package Provides <literal>Invoker</literal> interfaces and implementations:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Invoker</literal>: Core invoke interface;</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.core.invoke;

import org.testng.annotations.Test;
import xyz.srclab.common.invoke.Invoker;
import xyz.srclab.common.test.TestLogger;

public class InvokeSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testInvoke() throws Exception {
        Invoker invoker = Invoker.forMethod(String.class.getMethod("getBytes"));
        byte[] bytes = invoker.invoke("10086");
        //[49, 48, 48, 56, 54]
        logger.log("bytes: {}", bytes);
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.core.invoke

import org.testng.annotations.Test
import xyz.srclab.common.invoke.Invoker
import xyz.srclab.common.test.TestLogger

class InvokeSample {

    @Test
    fun testInvoke() {
        val invoker: Invoker = Invoker.forMethod(String::class.java, "getBytes")
        val bytes = invoker.invoke&lt;ByteArray&gt;("10086")
        //[49, 48, 48, 56, 54]
        logger.log("bytes: {}", bytes)
    }

    companion object {
        private val logger = TestLogger.DEFAULT
    }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_proxy">
<title>Proxy</title>
<simpara>Proxy package provides <literal>ProxyClass</literal> to proxy a class in runtime dynamically, by <literal>reflection</literal>, <literal>spring-core</literal> or <literal>cglib</literal> ways:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>ProxyClass</literal>: Core interface to proxy target <literal>Class</literal>;</simpara>
</listitem>
<listitem>
<simpara><literal>ProxyMethod</literal>: Core interface represents proxy method body;</simpara>
</listitem>
<listitem>
<simpara><literal>ProxyClassFactory</literal>: Factory to create <literal>ProxyClass</literal>, built-in <literal>Reflection</literal>, <literal>spring-core</literal> and <literal>cglib</literal> implementation;</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.core.proxy;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.testng.annotations.Test;
import xyz.srclab.common.proxy.ProxyClass;
import xyz.srclab.common.proxy.ProxyMethod;
import xyz.srclab.common.proxy.SuperInvoker;
import xyz.srclab.common.test.TestLogger;

import java.lang.reflect.Method;
import java.util.Arrays;

public class ProxySample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testProxy() {
        ProxyClass&lt;Object&gt; proxyClass = ProxyClass.newProxyClass(
            Object.class,
            Arrays.asList(
                new ProxyMethod&lt;Object&gt;() {
                    @NotNull
                    @Override
                    public String name() {
                        return "toString";
                    }

                    @NotNull
                    @Override
                    public Class&lt;?&gt;[] parameterTypes() {
                        return new Class[0];
                    }

                    @Nullable
                    @Override
                    public Object invoke(
                        Object proxied,
                        @NotNull Method proxiedMethod,
                        @Nullable Object[] args, @NotNull SuperInvoker superInvoker
                    ) {
                        return "Proxy[super: " + superInvoker.invoke(args) + "]";
                    }
                }
            )
        );
        String s = proxyClass.newInstance().toString();
        //Proxy[super: net.sf.cglib.empty.Object$$EnhancerByCGLIB$$4926690c@256f38d9]
        logger.log("s: {}", s);
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.core.proxy

import org.testng.annotations.Test
import xyz.srclab.common.proxy.ProxyClass.Companion.newProxyClass
import xyz.srclab.common.proxy.ProxyMethod
import xyz.srclab.common.proxy.SuperInvoker
import xyz.srclab.common.test.TestLogger
import java.lang.reflect.Method

class ProxySample {

    @Test
    fun testProxy() {
        val proxyClass = newProxyClass(
            Any::class.java,
            listOf(
                object : ProxyMethod&lt;Any&gt; {
                    override val name: String
                        get() {
                            return "toString"
                        }

                    override val parameterTypes: Array&lt;Class&lt;*&gt;&gt;
                        get() {
                            return emptyArray()
                        }

                    override fun invoke(
                        proxied: Any,
                        proxiedMethod: Method,
                        args: Array&lt;out Any?&gt;?, superInvoker: SuperInvoker
                    ): Any? {
                        return "Proxy[super: " + superInvoker.invoke(args) + "]"
                    }
                }
            )
        )
        val s = proxyClass.newInstance().toString()
        //Proxy[super: net.sf.cglib.empty.Object$$EnhancerByCGLIB$$4926690c@256f38d9]
        logger.log("s: {}", s)
    }

    companion object {
        private val logger = TestLogger.DEFAULT
    }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_state">
<title>State</title>
<simpara>State package provides <literal>State</literal> interfaces represents a state or status:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>State</literal>: Core interface represents a state or status;</simpara>
</listitem>
<listitem>
<simpara><literal>StringState</literal>: <literal>State</literal> for <literal>String</literal> type;</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.core.state;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.testng.annotations.Test;
import xyz.srclab.annotations.Immutable;
import xyz.srclab.common.state.State;
import xyz.srclab.common.state.StringState;
import xyz.srclab.common.test.TestLogger;

import java.util.List;

public class StateSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testState() {
        MyState myState = new MyState(1, "description");
        MyState newState = myState.withMoreDescription("cause");
        //description[cause]
        logger.log(newState.description());
    }

    public static class MyState implements State&lt;Integer, String, MyState&gt; {

        private final int code;
        private final List&lt;String&gt; descriptions;

        public MyState(int code, @Nullable String description) {
            this.code = code;
            this.descriptions = StringState.newDescriptions(description);
        }

        public MyState(int code, @Immutable List&lt;String&gt; descriptions) {
            this.code = code;
            this.descriptions = descriptions;
        }

        @Override
        public Integer code() {
            return code;
        }

        @Nullable
        @Override
        public String description() {
            return StringState.joinDescriptions(descriptions);
        }

        @NotNull
        @Override
        public List&lt;String&gt; descriptions() {
            return descriptions;
        }

        @NotNull
        @Override
        public MyState withNewDescription(@Nullable String newDescription) {
            return new MyState(code, StringState.newDescriptions(newDescription));
        }

        @NotNull
        @Override
        public MyState withMoreDescription(String moreDescription) {
            return new MyState(code, StringState.moreDescriptions(descriptions(), moreDescription));
        }
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.core.state

import org.testng.annotations.Test
import xyz.srclab.common.state.State
import xyz.srclab.common.state.StringState
import xyz.srclab.common.state.StringState.Companion.joinStateDescriptions
import xyz.srclab.common.state.StringState.Companion.moreDescriptions
import xyz.srclab.common.test.TestLogger

class StateSample {

    @Test
    fun testState() {
        val myState = MyState(1, "description")
        val newState = myState.withMoreDescription("cause")
        //description[cause]
        logger.log(newState.description)
    }

    class MyState(
        override val code: Int, override val descriptions: List&lt;String&gt;
    ) : State&lt;Int, String, MyState&gt; {

        constructor(code: Int, description: String?) : this(code, StringState.newDescriptions(description))

        override val description: String? = descriptions.joinStateDescriptions()

        override fun withNewDescription(newDescription: String?): MyState {
            return MyState(code, StringState.newDescriptions(newDescription))
        }

        override fun withMoreDescription(moreDescription: String): MyState {
            return MyState(code, descriptions.moreDescriptions(moreDescription))
        }
    }

    companion object {
        private val logger = TestLogger.DEFAULT
    }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_exception">
<title>Exception</title>
<simpara>Exception package provides <literal>Exception</literal> implementation and utilities:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>ExceptionStatus</literal>: Interface extends <xref linkend="_state"/>, used for <literal>Exception</literal>;</simpara>
</listitem>
<listitem>
<simpara><literal>StatusException</literal>: Exception implements <literal>ExceptionStatus</literal>;</simpara>
</listitem>
<listitem>
<simpara><literal>ImpossibleException</literal>: The exception represents an impossible thrown case but actually thrown;</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.core.exception;

import org.testng.annotations.Test;
import xyz.srclab.common.exception.ExceptionStatus;
import xyz.srclab.common.exception.StatusException;
import xyz.srclab.common.test.TestLogger;

public class ExceptionSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testStatusException() {
        SampleException sampleException = new SampleException();
        //000001-Unknown Error[for sample]
        logger.log("Status: {}", sampleException.withMoreDescription("for sample"));
    }

    public static class SampleException extends StatusException {

        public SampleException() {
            super(ExceptionStatus.UNKNOWN);
        }
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.core.exception

import org.testng.annotations.Test
import xyz.srclab.common.exception.ExceptionStatus
import xyz.srclab.common.exception.StatusException
import xyz.srclab.common.test.TestLogger

class ExceptionSample {

    @Test
    fun testStatusException() {
        val sampleException = SampleException()
        //000001-Unknown Error[for sample]
        logger.log("Status: {}", sampleException.withMoreDescription("for sample"))
    }

    class SampleException : StatusException(ExceptionStatus.UNKNOWN)

    companion object {
        private val logger = TestLogger.DEFAULT
    }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_collect">
<title>Collect</title>
<simpara>Collect package extends collection function, supports <literal>chain operation</literal>, <literal>multi-value-map</literal>, various utilities, etc.:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Collects</literal>: Default utilities for Collection;</simpara>
</listitem>
<listitem>
<simpara><literal>Collecting</literal>, <literal>Mapping</literal>: Collection interfaces provide chain operation and integrates common collection interface functions (such as <literal>Iterable</literal>, <literal>Collection</literal>, <literal>Set</literal>, <literal>List</literal>);</simpara>
</listitem>
<listitem>
<simpara><literal>IterableType</literal>, <literal>MapType</literal>: Meta type interfaces for generic Collection types;</simpara>
</listitem>
<listitem>
<simpara><literal>MultiMaps</literal>: <literal>MultiMaps</literal> provides multi-values <literal>Map</literal> such as <literal>SetMap</literal>, <literal>MutableSetMap</literal>, <literal>ListMap</literal> and <literal>MutableListMap</literal>;</simpara>
</listitem>
<listitem>
<simpara><literal>CopyOnWriteMap</literal>: Map for copy-on-write operation;</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.core.collect;

import org.testng.annotations.Test;
import xyz.srclab.common.collect.*;
import xyz.srclab.common.lang.Nums;
import xyz.srclab.common.test.TestLogger;

import java.util.*;

public class CollectSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testArray() {
        String[] strings = Collects.newArray("1", "2", "3");
        Collects.asList(strings).set(0, "111");
        //111
        logger.log("string[0]: {}", strings[0]);
    }

    @Test
    public void testCollect() {
        List&lt;String&gt; list = new ArrayList&lt;&gt;();
        list.add("1");
        list.add("2");
        list.add("3");
        Collecting&lt;String&gt; collect = Collects.collect(list);
        int sum = collect.addAll(Collects.newArray("4", "5", "6"))
            .removeFirst()
            .map(it -&gt; it + "0")
            .map(Nums::toInt)
            .reduce(Integer::sum);
        //200
        logger.log("sum: {}", sum);
    }

    @Test
    public void testMultiMap() {
        SetMap&lt;String, String&gt; setMap = SetMap.newSetMap(
            Collects.newMap(
                new LinkedHashMap&lt;&gt;(),
                "s", Collects.newCollection(new LinkedHashSet&lt;&gt;(), "1", "2", "3")
            )
        );
        //setMap: {s=[1, 2, 3]}
        logger.log("setMap: {}", setMap);

        MutableSetMap&lt;String, String&gt; mutableSetMap = MutableSetMap.newMutableSetMap(
            Collects.newMap(
                new LinkedHashMap&lt;&gt;(),
                "s", Collects.newCollection(new LinkedHashSet&lt;&gt;(), "1", "2", "3")
            )
        );
        mutableSetMap.add("s", "9");
        mutableSetMap.addAll("s", Collects.newCollection(new LinkedHashSet&lt;&gt;(), "11", "12", "13"));
        //mutableSetMap: {s=[1, 2, 3, 9, 11, 12, 13]}
        logger.log("mutableSetMap: {}", mutableSetMap);

        ListMap&lt;String, String&gt; listMap = ListMap.newListMap(
            Collects.newMap(
                new LinkedHashMap&lt;&gt;(),
                "s", Collects.newCollection(new LinkedList&lt;&gt;(), "1", "2", "3")
            )
        );
        //listMap: {s=[1, 2, 3]}
        logger.log("listMap: {}", listMap);

        MutableListMap&lt;String, String&gt; mutableListMap = MutableListMap.newMutableListMap(
            Collects.newMap(
                new LinkedHashMap&lt;&gt;(),
                "s", Collects.newCollection(new LinkedList&lt;&gt;(), "1", "2", "3")
            )
        );
        mutableListMap.add("s", "9");
        mutableListMap.addAll("s", Collects.newCollection(new LinkedList&lt;&gt;(), "11", "12", "13"));
        //mutableListMap: {s=[1, 2, 3, 9, 11, 12, 13]}
        logger.log("mutableListMap: {}", mutableListMap);
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.core.collect

import org.testng.annotations.Test
import xyz.srclab.common.collect.ListMap.Companion.toListMap
import xyz.srclab.common.collect.MutableListMap.Companion.toMutableListMap
import xyz.srclab.common.collect.MutableSetMap.Companion.toMutableSetMap
import xyz.srclab.common.collect.SetMap.Companion.toSetMap
import xyz.srclab.common.collect.addElements
import xyz.srclab.common.test.TestLogger
import java.util.*

class CollectSample {

    @Test
    fun testMultiMap() {
        val setMap = mapOf("s" to setOf("1", "2", "3")).toSetMap()
        //setMap: {s=[1, 2, 3]}
        logger.log("setMap: {}", setMap)

        val mutableSetMap = mutableMapOf("s" to mutableSetOf("1", "2", "3")).toMutableSetMap()
        mutableSetMap.add("s", "9")
        mutableSetMap.addAll("s", LinkedHashSet&lt;String&gt;().addElements("11", "12", "13"))
        //mutableSetMap: {s=[1, 2, 3, 9, 11, 12, 13]}
        logger.log("mutableSetMap: {}", mutableSetMap)

        val listMap = mapOf("s" to listOf("1", "2", "3")).toListMap()
        //listMap: {s=[1, 2, 3]}
        logger.log("listMap: {}", listMap)

        val mutableListMap = mutableMapOf("s" to mutableListOf("1", "2", "3")).toMutableListMap()
        mutableListMap.add("s", "9")
        mutableListMap.addAll("s", LinkedList&lt;String&gt;().addElements("11", "12", "13"))
        //mutableListMap: {s=[1, 2, 3, 9, 11, 12, 13]}
        logger.log("mutableListMap: {}", mutableListMap)
    }

    companion object {
        private val logger = TestLogger.DEFAULT
    }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_reflect">
<title>Reflect</title>
<simpara>Reflect package extends reflection function, provides many convenient reflection operation:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Reflects</literal>: Provides reflect operations;</simpara>
</listitem>
<listitem>
<simpara><literal>Types</literal>: To build generic types;</simpara>
</listitem>
<listitem>
<simpara><literal>TypeRef</literal>: Help to code a type reference;</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.core.reflect;

import org.testng.annotations.Test;
import xyz.srclab.common.reflect.Reflects;
import xyz.srclab.common.reflect.Types;
import xyz.srclab.common.test.TestLogger;

import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.util.List;

public class ReflectSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testReflects() {
        Method method = Reflects.method(Object.class, "toString");
        String s = Reflects.invoke(method, new Object());
        //java.lang.Object@97c879e
        logger.log("s: {}", s);
    }

    @Test
    public void testTypes() {
        ParameterizedType type = Types.parameterizedType(List.class, String.class);
        GenericArrayType arrayType = Types.genericArrayType(type);
        //java.util.List&lt;java.lang.String&gt;[]
        logger.log("arrayType: {}", arrayType);
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.core.reflect

import org.testng.annotations.Test
import xyz.srclab.common.reflect.genericArrayType
import xyz.srclab.common.reflect.invoke
import xyz.srclab.common.reflect.method
import xyz.srclab.common.reflect.parameterizedType
import xyz.srclab.common.test.TestLogger

class ReflectSample {

    @Test
    fun testReflects() {
        val method = Any::class.java.method("toString")
        val s = method.invoke&lt;String&gt;(Any())
        //java.lang.Object@97c879e
        logger.log("s: {}", s)
    }

    @Test
    fun testTypes() {
        val type = parameterizedType(MutableList::class.java, String::class.java)
        val arrayType = type.genericArrayType()
        //java.util.List&lt;java.lang.String&gt;[]
        logger.log("arrayType: {}", arrayType)
    }

    companion object {
        private val logger = TestLogger.DEFAULT
    }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_io">
<title>IO</title>
<simpara>IO package provides Input/Output interfaces and utilities package:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>IOStreams</literal>: Provides operations for <literal>Input</literal>/<literal>Output</literal>, <literal>Reader</literal>/<literal>Writer</literal>;</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.core.io;

import org.testng.Assert;
import org.testng.annotations.Test;
import xyz.srclab.common.io.IOStreams;
import xyz.srclab.common.test.TestLogger;

import java.io.*;
import java.util.Arrays;
import java.util.List;

/**
 * @author sunqian
 */
public class IOSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testStream() throws Exception {
        String text = "123456\r\n234567\r\n";
        InputStream input = new ByteArrayInputStream(text.getBytes());
        String inputString = IOStreams.readString(input);
        input.reset();
        logger.log("inputString: {}", inputString);
        Assert.assertEquals(inputString, text);
        byte[] bytes = IOStreams.readBytes(input);
        input.reset();
        Assert.assertEquals(bytes, text.getBytes());
        List&lt;String&gt; inputStrings = IOStreams.readLines(input);
        input.reset();
        Assert.assertEquals(inputStrings, Arrays.asList("123456", "234567"));
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        IOStreams.readTo(input, output);
        input.reset();
        Assert.assertEquals(output.toByteArray(), bytes);
    }

    @Test
    public void testReader() throws Exception {
        String text = "123456\r\n234567\r\n";
        InputStream input = new ByteArrayInputStream(text.getBytes());
        Reader reader = IOStreams.toReader(input);
        String readString = IOStreams.readString(reader);
        input.reset();
        logger.log("readString: {}", readString);
        Assert.assertEquals(readString, text);
        char[] chars = IOStreams.readString(reader).toCharArray();
        input.reset();
        Assert.assertEquals(chars, text.toCharArray());
        List&lt;String&gt; readStrings = IOStreams.readLines(reader);
        input.reset();
        Assert.assertEquals(readStrings, Arrays.asList("123456", "234567"));
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        Writer writer = IOStreams.toWriter(output);
        IOStreams.readTo(reader, writer);
        input.reset();
        writer.flush();
        Assert.assertEquals(output.toByteArray(), text.getBytes());
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.core.io

import org.testng.Assert
import org.testng.annotations.Test
import xyz.srclab.common.io.*
import xyz.srclab.common.test.TestLogger
import java.io.ByteArrayInputStream
import java.io.ByteArrayOutputStream
import java.io.InputStream
import java.util.*

/**
 * @author sunqian
 */
class IOSample {

    @Test
    @Throws(Exception::class)
    fun testStream() {
        val text = "123456\r\n234567\r\n"
        val input: InputStream = ByteArrayInputStream(text.toByteArray())
        val inputString = input.readString()
        input.reset()
        logger.log("inputString: {}", inputString)
        Assert.assertEquals(inputString, text)
        val bytes = input.readBytes()
        input.reset()
        Assert.assertEquals(bytes, text.toByteArray())
        val inputStrings: List&lt;String?&gt; = input.readLines()
        input.reset()
        Assert.assertEquals(inputStrings, Arrays.asList("123456", "234567"))
        val output = ByteArrayOutputStream()
        input.readTo(output)
        input.reset()
        Assert.assertEquals(output.toByteArray(), bytes)
    }

    @Test
    @Throws(Exception::class)
    fun testReader() {
        val text = "123456\r\n234567\r\n"
        val input: InputStream = ByteArrayInputStream(text.toByteArray())
        val reader = input.toReader()
        val readString = reader.readString()
        input.reset()
        logger.log("readString: {}", readString)
        Assert.assertEquals(readString, text)
        val chars = reader.readString().toCharArray()
        input.reset()
        Assert.assertEquals(chars, text.toCharArray())
        val readStrings: List&lt;String?&gt; = reader.readLines()
        input.reset()
        Assert.assertEquals(readStrings, Arrays.asList("123456", "234567"))
        val output = ByteArrayOutputStream()
        val writer = output.toWriter()
        reader.readTo(writer)
        input.reset()
        writer.flush()
        Assert.assertEquals(output.toByteArray(), text.toByteArray())
    }

    companion object {
        private val logger = TestLogger.DEFAULT
    }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_jvm">
<title>Jvm</title>
<simpara>Jvm provides jvm underlying operations:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Jvms</literal>: Provides JVM underlying operations;</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.core.jvm;

import org.testng.annotations.Test;
import xyz.srclab.common.jvm.Jvms;
import xyz.srclab.common.test.TestLogger;

public class JvmSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testJvms() {
        String jvmDescriptor = Jvms.jvmDescriptor(int.class);
        //I
        logger.log("jvmDescriptor: {}", jvmDescriptor);
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.core.jvm

import org.testng.annotations.Test
import xyz.srclab.common.jvm.jvmDescriptor
import xyz.srclab.common.test.TestLogger

class JvmSample {

    @Test
    fun testJvms() {
        val jvmDescriptor = Int::class.javaPrimitiveType!!.jvmDescriptor
        //I
        logger.log("jvmDescriptor: {}", jvmDescriptor)
    }

    companion object {
        private val logger = TestLogger.DEFAULT
    }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_utils">
<title>Utils</title>
<simpara>Utils package provides Other convenient tools:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Counter</literal>: Simple counter for int/long, may atomic;</simpara>
</listitem>
<listitem>
<simpara><literal>About</literal>: Product info such as <literal>About</literal>, <literal>Author</literal>, <literal>SemVer</literal>;</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.core.utils;

import org.testng.annotations.Test;
import xyz.srclab.common.test.TestLogger;
import xyz.srclab.common.utils.About;
import xyz.srclab.common.utils.Author;
import xyz.srclab.common.utils.Counter;
import xyz.srclab.common.utils.SemVer;

import java.util.Collections;

public class UtilsSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testCounter() {
        Counter counter = Counter.startsAt(100);
        counter.getAndIncrementInt();
        counter.reset();
        Counter atomicCounter = Counter.startsAt(100, true);
        atomicCounter.incrementAndGetInt();
        atomicCounter.reset();
    }

    @Test
    public void testAbout() {
        String verString = "1.2.3-beta.2.3+123";
        SemVer semVer = SemVer.parse(verString);
        About about = About.of(
            "name",
            semVer.normalString(),
            Collections.singletonList(Author.of("name", "author@mail.com", null)),
            "123@123.com",
            "url",
            Collections.singletonList("licence"),
            Collections.singletonList(About.of(
                "poweredBy",
                null,
                Collections.emptyList(),
                null,
                null,
                Collections.emptyList(),
                Collections.emptyList(),
                null
            )),
            "© 2021 SrcLab"
        );
        //name
        //Version: 1.2.3
        //Author: name(author@mail.com)
        //Mail: 123@123.com
        //Url: url
        //Licence: licence
        //Powered by: poweredBy
        //© 2021 SrcLab
        logger.log("About: {}", about);
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.core.utils

import org.testng.annotations.Test
import xyz.srclab.common.test.TestLogger
import xyz.srclab.common.utils.About
import xyz.srclab.common.utils.Author
import xyz.srclab.common.utils.Counter.Companion.counterStarts
import xyz.srclab.common.utils.SemVer
import xyz.srclab.common.utils.SemVer.Companion.parseSemVer

class BaseSample {

    @Test
    fun testAbout() {
        val verString = "1.2.3-beta.2.3+123"
        val semVer: SemVer = verString.parseSemVer()
        val about = About.of(
            "name",
            semVer.normalString,
            listOf(Author.of("name", "author@mail.com", null)),
            "123@123.com",
            "url",
            listOf("licence"),
            listOf(
                About.of(
                    "poweredBy",
                    null,
                    emptyList(),
                    null,
                    null,
                    emptyList(),
                    emptyList(),
                    null
                )
            ),
            "© 2021 SrcLab"
        )
        //name
        //Version: 1.2.3
        //Author: name(author@mail.com)
        //Mail: 123@123.com
        //Url: url
        //Licence: licence
        //Powered by: poweredBy
        //© 2021 SrcLab
        logger.log("About: {}", about)
    }

    @Test
    fun testCounter() {
        val counter = 100.counterStarts()
        counter.getAndIncrementInt()
        counter.reset()
        val atomicCounter = 100.counterStarts(true)
        atomicCounter.incrementAndGetInt()
        atomicCounter.reset()
    }

    companion object {
        private val logger = TestLogger.DEFAULT
    }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_test">
<title>Test</title>
<simpara>Test package provides interfaces and utilities for testing:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Tester</literal>: Core interface to run test tasks;</simpara>
</listitem>
<listitem>
<simpara><literal>TestTask</literal>, <literal>TestListener</literal>: Cor interface of test task and listener;</simpara>
</listitem>
<listitem>
<simpara><literal>TestLogger</literal>: Simple logger for testing;</simpara>
</listitem>
<listitem>
<simpara><literal>Tests</literal>: Default utilities for testing;</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.core.test;

import org.testng.annotations.Test;
import xyz.srclab.common.test.TestLogger;
import xyz.srclab.common.test.TestTask;
import xyz.srclab.common.test.Tests;

import java.util.Arrays;

public class TestSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testTests() {
        Tests.testTasks(Arrays.asList(
            TestTask.newTask(() -&gt; {
                logger.log("Run test task!");
            })
        ));
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.core.test

import org.testng.annotations.Test
import xyz.srclab.common.test.TestLogger
import xyz.srclab.common.test.TestTask
import xyz.srclab.common.test.testTasks

class TestSample {

    @Test
    fun testTests() {
        testTasks(
            listOf(
                TestTask.newTask { logger.log("Run test task!") }
            )
        )
    }

    companion object {
        private val logger = TestLogger.DEFAULT
    }
}</programlisting>
</para>
</formalpara>
</section>
</section>
</article>