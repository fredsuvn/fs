import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Paths

plugins {
  id 'fs-build'
}

project.repositories {
  mavenLocal()
  maven {
    url "https://maven.aliyun.com/repository/central"
  }
  maven {
    url "https://maven.aliyun.com/repository/public"
  }
  mavenCentral()
  //jcenter()
}

//def l = kotlinVersion
//
//fs {
//  logLevel = findProject("buildLogLevel")
//}
project.afterEvaluate {
  fs {
    logLevel = buildLogLevel
  }
}

final ThreadLocal<Project> localProject = ThreadLocal.withInitial { project }

static boolean isEnable(Object value) {
  if (value == null) {
    return false
  }
  if (value instanceof Boolean) {
    return value
  }
  String valueToString = value.toString().trim()
  return valueToString.equalsIgnoreCase("true") ||
    valueToString.equalsIgnoreCase("yes") ||
    valueToString.equalsIgnoreCase("enbale") ||
    valueToString.equalsIgnoreCase("1") ||
    valueToString.equalsIgnoreCase("t") ||
    valueToString.equalsIgnoreCase("open")
}

static String currentGradleDirectoryPath(buildscript) {
  java.nio.file.Path sourcePath = buildscript.sourceFile.toPath()
  def parent = sourcePath.getParent()
  return parent.toString() + File.separator
}

static String readFileAsString(String path, String charset) {
  return new String(Files.readAllBytes(
    Paths.get(path)
  ), charset)
}

static void writeBuildInfos(Project project, String relativePath) {
  Map<String, String> properties = new LinkedHashMap<>()
  String version = project.version.toString()
  properties.put("build.version", version)
  properties.put("build.serial.version", parseVersionToLong(version))
  StringBuilder buffer = new StringBuilder()
  properties.forEach() { k, v ->
    buffer.append(k).append("=").append(v).append("\r\n")
  }
  Files.write(Paths.get(project.projectDir.path, relativePath), buffer.toString().getBytes(StandardCharsets.UTF_8))
}

private static long parseVersionToLong(String version) {
  String[] split = version.split("\\.")
  if (split.length != 3) {
    throw new IllegalArgumentException("Illegal version format, must be a.b.c: $version")
  }
  return Long.parseLong(split[0]) * 1000000 + Long.parseLong(split[1]) * 1000 + Long.parseLong(split[2])
}

ext["utils"] = [
  isEnable                  : this.&isEnable,
  currentGradleDirectoryPath: this.&currentGradleDirectoryPath,
  readFileAsString          : this.&readFileAsString,
  writeBuildInfos           : this.&writeBuildInfos,
]