plugins {
  id 'gek'
  id 'gek-config'
  id 'maven-publish'
  id 'signing'
}

project.afterEvaluate {
  gek.info "Configure gek-publish"
  configurePublishing()
}

def configurePublishing() {
  publishing {
    publications {
      mavenJar(MavenPublication) {
        if (components.hasProperty("javaPlatform")) {
          from components.javaPlatform
        } else {
          from components.java
        }
        //artifact sourceJar
        //artifact javadocJar
        configurePublishMavenPom(it, projectInfo)
      }
      if (project.tasks.findByName("javadocJar")) {
        mavenJavadocJar(MavenPublication) {
          artifact(javadocJar) {
            classifier = 'javadoc'
          }
        }
      }
      if (project.tasks.findByName("sourcesJar")) {
        mavenSourcesJar(MavenPublication) {
          artifact(sourcesJar) {
            classifier = 'sources'
          }
        }
      }
    }
    if (publishInfo.isToRemote) {
      repositories {
        configurePublishRepositories(it, publishInfo)
      }
    }
    if (publishInfo.isSigning) {
      configureSigning(publishInfo)
      signing {
        sign publishing.publications.maven
      }
    }
  }
}

def configurePublishMavenPom(MavenPublication maven, projectInfo) {
  maven.pom {
    name = project.name
    description = project.description
    url = projectInfo.url
    inceptionYear = projectInfo.inceptionYear
    scm {
      connection = "scm:git:${projectInfo.url}.git"
      developerConnection = "scm:git:${projectInfo.url}.git"
      url = projectInfo.url
    }
    if (projectInfo.licenses != null) {
      licenses {
        projectInfo.licenses.forEach { each ->
          license {
            name = each.name
            url = each.url
          }
        }
      }
    }
    if (projectInfo.developers != null) {
      developers {
        projectInfo.developers.forEach { each ->
          developer {
            email = each.email
          }
        }
      }
    }
    gek.debug("maven-pom.name: $name")
    gek.debug("maven-pom.description: $description")
  }
}

def configurePublishRepositories(RepositoryHandler repositories, publishInfo) {
  if (publishInfo.isSnapshot) {
    repositories.maven {
      name = publishInfo.snapshotId
      url = publishInfo.snapshotUrl
      gek.debug("snapshot.name: $name")
      gek.debug("snapshot.url: $url")
      credentials {
        username = getProperty("publish${name.capitalize()}Username")
        password = getProperty("publish${name.capitalize()}Password")
        gek.debug("snapshot.username: $username")
        gek.debug("snapshot.password: $password")
      }
    }
  } else {
    repositories.maven {
      name = publishInfo.releaseId
      url = publishInfo.releaseUrl
      gek.debug("release.name: $name")
      gek.debug("release.url: $url")
      credentials {
        username = getProperty("publish${name.capitalize()}Username")
        password = getProperty("publish${name.capitalize()}Password")
        gek.debug("release.username: $username")
        gek.debug("release.password: $password")
      }
    }
  }
}

def configureSigning(publishInfo) {
  signing {
    def signingName = publishInfo.signingId
    def signingKeyId = getProperty("signing${signingName.capitalize()}KeyId")
    def signingPassword = getProperty("signing${signingName.capitalize()}Password")
    def signingKey = utils.readFileAsString(getProperty("signing${signingName.capitalize()}KeyFile"), "UTF-8")
    gek.debug("signing.signingKeyId: $signingKeyId")
    gek.debug("signing.signingPassword: $signingPassword")
    gek.debug("signing.signingKey: $signingKey")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
  }
}