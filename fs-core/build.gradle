plugins {
  id "com.google.protobuf" version "$protobufPluginVersion"
  id 'build.jar'
  id 'org.jetbrains.kotlin.plugin.lombok' version '1.7.0'
  id 'io.freefair.lombok' version '5.3.0'
}

description = "Core of mage."

//fs {
//  global {
//    logLevel = fsLogLevel
//  }
//}

java {
  registerFeature('optionalSupport') {
    usingSourceSet(sourceSets.main)
  }
}

dependencies {
  api platform(project(":fs-dependencies"))

  api project(":fs-annotations")

  compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.26'
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.26'

  compileOnly "org.springframework:spring-core"
  compileOnly "cglib:cglib"
  compileOnly "org.bouncycastle:bcprov-jdk15on"
  compileOnly "com.google.protobuf:protobuf-java"
  compileOnly "io.netty:netty-all"

  testImplementation project(":fs-test")
  testImplementation "commons-beanutils:commons-beanutils:1.9.4"
  testImplementation group: 'org.springframework', name: 'spring-core', version: '5.3.29'
  testImplementation group: 'org.springframework', name: 'spring-beans', version: '5.3.29'
  testImplementation "cglib:cglib"
  //testImplementation "org.bouncycastle:bcprov-jdk15on"
  testImplementation group: 'cn.hutool', name: 'hutool-all', version: '5.8.21'
  testImplementation "com.google.protobuf:protobuf-java"

  //implementation project(":fs-processor")
  //annotationProcessor project(":fs-processor")

  testAnnotationProcessor platform(project(":fs-dependencies"))
  testAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess"

  //testImplementation "org.apache.velocity:velocity"
  //testImplementation "io.netty:netty-all"

  //testImplementation group: 'cn.hutool', name: 'hutool-all', version: '5.7.14'

  //testImplementation 'org.apache.velocity:velocity-engine-core:2.3'
  // https://mvnrepository.com/artifact/com.github.javaparser/javaparser-core
  //testImplementation group: 'com.github.javaparser', name: 'javaparser-core', version: '3.25.2'
  // https://mvnrepository.com/artifact/com.github.javaparser/javaparser-symbol-solver-core
  //testImplementation group: 'com.github.javaparser', name: 'javaparser-symbol-solver-core', version: '3.25.2'
  //api "org.slf4j:slf4j-api"
  //api "org.apache.commons:commons-lang3"
  //api "org.apache.commons:commons-collections4"
  //api "commons-beanutils:commons-beanutils"
  //api "commons-io:commons-io"
  //api "commons-codec:commons-codec"
  //api "com.google.guava:guava"
  testImplementation "com.github.ben-manes.caffeine:caffeine"
  //api "org.yaml:snakeyaml"
}

//utils.writeBuildInfos(project, "src/main/resources/META-INF/build.properties")

//tasks.register('buildFs') {
//  dependsOn 'compileJava'
//  mustRunAfter 'clean'
//}

//task compileFs {
//  dependsOn 'clean', 'compileJava'
//}

def generatedPath = "generated"
def protoPath = "$generatedPath/proto"

sourceSets {
  test {
    proto {
      srcDirs = ["src/test/proto"]
    }
    //java {
    //    srcDirs += "$protoPath/test/java"
    //}
  }
}

protobuf {
  generatedFilesBaseDir = "$protoPath"
  protoc {
    // Download from repositories
    artifact = "com.google.protobuf:protoc:$protocVersion"
    //generatedFilesBaseDir = "generated/proto"
  }

  plugins {
    //grpc {
    //  artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
    //}
    //grpckt {
    //  artifact = "io.grpc:protoc-gen-grpc-kotlin:$grpcKotlinVersion"
    //}
  }

  generateProtoTasks {
    all()*.each { task ->
      task.plugins {
        // Generate Java gRPC classes
        //grpc {
        //  setOutputSubDir "$protoGenDir"
        //}
        // Generate Kotlin gRPC using the custom plugin from library
        //grpckt {}
      }
    }
  }
}

clean {
  delete("${protobuf.generatedFilesBaseDir}")
  delete("$generatedPath/temp")
}