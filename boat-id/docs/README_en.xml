<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="3"?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title><inlinemediaobject>
<imageobject>
<imagedata fileref="../../logo.svg"/>
</imageobject>
<textobject><phrase>Boat Id</phrase></textobject>
</inlinemediaobject> <literal>boat-id</literal></title>
<subtitle>Boat Id&#8201;&#8212;&#8201;Id Generation Lib of <link xl:href="../../README.md">Boat</link></subtitle>
<date>2021-05-26</date>
<author>
<personname>
<firstname>Sun</firstname>
<surname>Qian</surname>
</personname>
<email>fredsuvn@163.com</email>
</author>
<authorinitials>SQ</authorinitials>
</info>
<section xml:id="_introduction">
<title>Introduction</title>
<simpara>Boat Id is a simple id generation lib for <link xl:href="../../README.md">Boat</link>.
It provides a set of interface such as <literal>IdGenerator</literal> and <literal>IdSpec</literal> to generate new id.</simpara>
</section>
<section xml:id="_usage">
<title>Usage</title>
<section xml:id="_idspec">
<title>IdSpec</title>
<simpara>To create an id generation rule, we can use <literal>IdSpec</literal>:</simpara>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">class Example{
    @Test
    public void test() {
        String spec = "seq-{Snowflake, 20, 41, 10, 12}-tail";
        IdSpec stringIdSpec = new IdSpec(spec);
        String id = stringIdSpec.newId();
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">class Example {
    @Test
    fun test() {
        val spec = "seq-{Snowflake, 20, 41, 10, 12}-tail"
        val stringIdSpec = IdSpec(spec)
        val id = stringIdSpec.newId()
    }
}</programlisting>
</para>
</formalpara>
<simpara>The result may be: <literal>seq-06803239610792857600-tail</literal></simpara>
<simpara><literal>IdSpec</literal> consists of literals and <literal>IdComponent</literal>'s,
<literal>IdComponent</literal>s are wrapped between <literal>{</literal> and <literal>}</literal>, format is <literal>{type[: name][, arg]+}</literal>
(a comma follows a space or not, note space will be trimmed).</simpara>
<note>
<simpara><literal>IdSpec</literal>'s parameter syntax is come from <literal>CharsTemplate</literal> of <literal>boat-core</literal>.</simpara>
</note>
<simpara><literal>IdSpec</literal> has 1 built-in <literal>IdComponent</literal>:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Snowflake</literal></simpara>
</listitem>
</itemizedlist>
<simpara>For more detail about <literal>IdSpec</literal>, see its javadoc.</simpara>
</section>
<section xml:id="_idgenerator">
<title>IdGenerator</title>
<simpara><literal>IdGenerator</literal> is core interface of boat-id, <literal>IdSpec</literal> is its subtype.
We can create an <literal>IdGenerator</literal> to custom generation rules.</simpara>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">public class MyIdComponent implements IdComponent&lt;String&gt; {

    public static final String TYPE = "My";

    private String value;

    @NotNull
    @Override
    public String type() {
        return TYPE;
    }

    @Override
    public void init(@NotNull List&lt;?&gt; args) {
        this.value = String.valueOf(args.get(0));
    }

    @Override
    public String newValue(@NotNull IdContext context) {
        return value;
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">class MyIdComponent : IdComponent&lt;String?&gt; {

    private var value: String? = null
    override val type: String = TYPE

    override fun init(args: List&lt;Any&gt;) {
        value = args[0].toString()
    }

    override fun newValue(context: IdContext): String? {
        return value
    }

    companion object {
        const val TYPE = "My"
    }
}</programlisting>
</para>
</formalpara>
<simpara>Then, add the <literal>MyIdComponent</literal>:</simpara>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">class Example{
    @Test
    public void test() {
        IdSpec stringIdSpec = new IdSpec(spec, type -&gt; {
            if (type.equals(MyIdComponent.TYPE)) {
                return new MyIdComponent();
            }
            return IdSpec.DEFAULT_COMPONENT_SUPPLIER.get(type);
        });
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">class Example {
    @Test
    fun test() {
        val stringIdSpec = IdSpec(spec, object : ComponentSupplier {
            override fun get(type: String): IdComponent&lt;*&gt; {
                if (type == MyIdComponent.TYPE) {
                    return MyIdComponent()
                }
                return IdSpec.DEFAULT_COMPONENT_SUPPLIER.get(type)
            }
        })
    }
}</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="_samples">
<title>Samples</title>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.id;

import org.testng.Assert;
import org.testng.annotations.Test;
import xyz.srclab.common.id.IdSpec;
import xyz.srclab.common.test.TestLogger;

public class IdSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testId() {
        //seq0-06803239610792857600-tail
        String spec0 = "seq0-{Snowflake, 20, 41, 10, 12}-tail";
        IdSpec stringIdSpec0 = new IdSpec(spec0);
        for (int i = 0; i &lt; 10; i++) {
            logger.log(stringIdSpec0.newId());
        }

        //seq1-00001826267315077279180346359808-tail
        String spec1 = "seq1-{Snowflake, 32, 55, 25, 25}-tail";
        IdSpec stringIdSpec1 = new IdSpec(spec1);
        for (int i = 0; i &lt; 10; i++) {
            logger.log(stringIdSpec1.newId());
        }

        //seq2-29921563690270857976266765631488-tail
        String spec2 = "seq2-{Snowflake, 32, 63, 32, 32}-tail";
        IdSpec stringIdSpec2 = new IdSpec(spec2);
        for (int i = 0; i &lt; 10; i++) {
            logger.log(stringIdSpec2.newId());
        }

        //seq3{}-06803240106559590400-tail
        String spec3 = "seq3\\{}-{Snowflake, 20, 41, 10, 12}-tail";
        IdSpec stringIdSpec3 = new IdSpec(spec3);
        for (int i = 0; i &lt; 10; i++) {
            logger.log(stringIdSpec3.newId());
        }

        //seq4{}-06805124180752646144-tail
        String spec4 = "seq4\\{\\}-{Snowflake, 20, 41, 10, 12}-tail";
        IdSpec stringIdSpec4 = new IdSpec(spec4);
        for (int i = 0; i &lt; 10; i++) {
            logger.log(stringIdSpec4.newId());
        }

        String spec5 = "seq5\\{\\}-{Snowflake, 20, 41, 10, 12";
        Assert.expectThrows(IllegalArgumentException.class, () -&gt; new IdSpec(spec5));
    }

    @Test
    public void testCustomId() {
        String spec = "seq-{Snowflake, 20, 41, 10, 12}-{My, 88888}";
        IdSpec stringIdSpec = new IdSpec(spec, type -&gt; {
            if (type.equals(MyIdComponent.TYPE)) {
                return new MyIdComponent();
            }
            return IdSpec.DEFAULT_COMPONENT_SUPPLIER.get(type);
        });
        //seq-06803242693339123712-88888
        for (int i = 0; i &lt; 10; i++) {
            logger.log(stringIdSpec.newId());
        }
    }
}</programlisting>
</para>
</formalpara>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.id;

import org.jetbrains.annotations.NotNull;
import xyz.srclab.common.id.IdComponent;
import xyz.srclab.common.id.IdContext;

import java.util.List;

/**
 * @author sunqian
 */
public class MyIdComponent implements IdComponent&lt;String&gt; {

    public static final String TYPE = "My";

    private String value;

    @NotNull
    @Override
    public String type() {
        return TYPE;
    }

    @Override
    public void init(@NotNull List&lt;?&gt; args) {
        this.value = String.valueOf(args.get(0));
    }

    @Override
    public String newValue(@NotNull IdContext context) {
        return value;
    }
}</programlisting>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.id

import org.testng.Assert
import org.testng.annotations.Test
import xyz.srclab.common.id.IdComponent
import xyz.srclab.common.id.IdContext
import xyz.srclab.common.id.IdSpec
import xyz.srclab.common.id.IdSpec.ComponentSupplier
import xyz.srclab.common.test.TestLogger

class IdSample {

    private val logger = TestLogger.DEFAULT

    @Test
    fun testId() {
        //seq0-06803239610792857600-tail
        val spec0 = "seq0-{Snowflake, 20, 41, 10, 12}-tail"
        val stringIdSpec0 = IdSpec(spec0)
        for (i in 0..9) {
            logger.log(stringIdSpec0.newId())
        }

        //seq1-00001826267315077279180346359808-tail
        val spec1 = "seq1-{Snowflake, 32, 55, 25, 25}-tail"
        val stringIdSpec1 = IdSpec(spec1)
        for (i in 0..9) {
            logger.log(stringIdSpec1.newId())
        }

        //seq2-29921563690270857976266765631488-tail
        val spec2 = "seq2-{Snowflake, 32, 63, 32, 32}-tail"
        val stringIdSpec2 = IdSpec(spec2)
        for (i in 0..9) {
            logger.log(stringIdSpec2.newId())
        }

        //seq3{}-06803240106559590400-tail
        val spec3 = "seq3\\{}-{Snowflake, 20, 41, 10, 12}-tail"
        val stringIdSpec3 = IdSpec(spec3)
        for (i in 0..9) {
            logger.log(stringIdSpec3.newId())
        }

        //seq4{}-06805124180752646144-tail
        val spec4 = "seq4\\{\\}-{Snowflake, 20, 41, 10, 12}-tail"
        val stringIdSpec4 = IdSpec(spec4)
        for (i in 0..9) {
            logger.log(stringIdSpec4.newId())
        }

        val spec5 = "seq5\\{\\}-{Snowflake, 20, 41, 10, 12"
        Assert.expectThrows(
            IllegalArgumentException::class.java
        ) { IdSpec(spec5) }
    }

    @Test
    fun testCustomId() {
        val spec = "seq-{Snowflake, 20, 41, 10, 12}-{My, 88888}"
        val stringIdSpec = IdSpec(spec, object : ComponentSupplier {
            override fun get(type: String): IdComponent&lt;*&gt; {
                if (type == MyIdComponent.TYPE) {
                    return MyIdComponent()
                }
                return IdSpec.DEFAULT_COMPONENT_SUPPLIER.get(type)
            }
        })
        //seq-06803242693339123712-88888
        for (i in 0..9) {
            logger.log(stringIdSpec.newId())
        }
    }
}

class MyIdComponent : IdComponent&lt;String?&gt; {

    private var value: String? = null
    override val type: String = TYPE

    override fun init(args: List&lt;Any&gt;) {
        value = args[0].toString()
    }

    override fun newValue(context: IdContext): String? {
        return value
    }

    companion object {
        const val TYPE = "My"
    }
}</programlisting>
</para>
</formalpara>
</section>
</article>