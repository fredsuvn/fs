<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="3"?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title><inlinemediaobject>
<imageobject>
<imagedata fileref="../../logo.svg"/>
</imageobject>
<textobject><phrase>Boat Id</phrase></textobject>
</inlinemediaobject> <literal>boat-id</literal></title>
<subtitle>Boat Id&#8201;&#8212;&#8201;Id Generation Lib of <link xl:href="../../README.md">Boat</link></subtitle>
<date>2021-07-11</date>
<author>
<personname>
<firstname>Sun</firstname>
<surname>Qian</surname>
</personname>
<email>fredsuvn@163.com</email>
</author>
<authorinitials>SQ</authorinitials>
</info>
<section xml:id="_introduction">
<title>Introduction</title>
<simpara>Boat Id is a simple global unique id generation framework for <link xl:href="../../README.md">Boat</link>.
It provides a set of interface such as <literal>IdGenerator</literal> and <literal>SnowflakeIdGenerator</literal> to generate global unique id.</simpara>
</section>
<section xml:id="_usage">
<title>Usage</title>
<simpara>Boat Id provides <literal>IdGenerator</literal> as core interface to generate any type of id,
<literal>SnowflakeIdGenerator</literal> to generate long type id by <emphasis role="strong">SnowflakeId</emphasis>.</simpara>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.id;

import org.testng.annotations.Test;
import xyz.srclab.common.id.IdGenerator;
import xyz.srclab.common.id.SnowflakeIdGenerator;
import xyz.srclab.common.lang.Nums;
import xyz.srclab.common.test.TestLogger;

import java.util.UUID;

public class IdSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testSnowflake() {
        SnowflakeIdGenerator snowflakeIdGenerator = new SnowflakeIdGenerator(1);
        for (int i = 0; i &lt; 10; i++) {
            long id = snowflakeIdGenerator.next();
            //Snowflake: 6819769124932030464 : 0101111010100100101011111110001011101101110000000001000000000000
            logger.log("Snowflake: " + id + " : " + Nums.toBinaryString(id));
        }
    }

    @Test
    public void testIdGenerator() {
        IdGenerator&lt;String, String, String, String&gt; idGenerator = IdGenerator.newIdGenerator(
            () -&gt; UUID.randomUUID().toString(),
            l -&gt; l.substring(0, 10),
            i -&gt; i.substring(11, 15),
            (l, i) -&gt; l + "-" + i
        );
        for (int i = 0; i &lt; 10; i++) {
            String id = idGenerator.next();
            //IdGenerator: 4f8c8c34-2-83-4
            logger.log("IdGenerator: " + id);
        }
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.id

import org.testng.annotations.Test
import xyz.srclab.common.id.IdGenerator
import xyz.srclab.common.id.SnowflakeIdGenerator
import xyz.srclab.common.lang.toBinaryString
import xyz.srclab.common.test.TestLogger
import java.util.*

class IdSample {

    private val logger = TestLogger.DEFAULT


    @Test
    fun testSnowflake() {
        val snowflakeIdGenerator = SnowflakeIdGenerator(1)
        for (i in 0..9) {
            val id = snowflakeIdGenerator.next()
            //Snowflake: 6819769124932030464 : 0101111010100100101011111110001011101101110000000001000000000000
            logger.log("Snowflake: $id : ${id.toBinaryString()}")
        }
    }

    @Test
    fun testIdGenerator() {
        val idGenerator = IdGenerator.newIdGenerator(
            { UUID.randomUUID().toString() },
            { l: String -&gt; l.substring(0, 10) },
            { i: String -&gt; i.substring(11, 15) }
        ) { l: String, i: String -&gt; "$l-$i" }
        for (i in 0..9) {
            val id = idGenerator.next()
            //IdGenerator: 4f8c8c34-2-83-4
            logger.log("IdGenerator: $id")
        }
    }
}</programlisting>
</para>
</formalpara>
</section>
</article>