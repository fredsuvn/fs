<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="3"?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title><inlinemediaobject>
<imageobject>
<imagedata fileref="../../logo.svg"/>
</imageobject>
<textobject><phrase>Boat Serialize</phrase></textobject>
</inlinemediaobject> <literal>boat-serialize</literal></title>
<subtitle>Boat Serialize&#8201;&#8212;&#8201;<link xl:href="../../README.md">Boat</link> 序列化和反序列化库</subtitle>
<date>2021-07-12</date>
<author>
<personname>
<firstname>Sun</firstname>
<surname>Qian</surname>
</personname>
<email>fredsuvn@163.com</email>
</author>
<authorinitials>SQ</authorinitials>
</info>
<section xml:id="_简介">
<title>简介</title>
<simpara>Boat Serialize 提供了同意的接口 (<literal>Serializer</literal>, <literal>Serial</literal>) 来支持序列化和反序列化.</simpara>
<simpara>当前它支持的格式有:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="_json"/></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_用法">
<title>用法</title>
<section xml:id="_json">
<title>JSON</title>
<simpara>Json包提供 <literal>Serial</literal> 的JSON格式实现: <literal>Json</literal>.</simpara>
<simpara>想要获得一个 <literal>Json</literal>, 我们可以使用 boat-serialize 的核心工具类: <literal>JsonSerials</literal>.</simpara>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">class Example{
    @Test
    public void test() {
        Json json = JsonSerials.toJson("{\"p1\":\"p1 value\",\"p2\":\"p2 value\"}");
        Map&lt;String, String&gt; map = json.toObject(new TypeRef&lt;Map&lt;String, String&gt;&gt;() {
        });
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">class Example {
    @Test
    fun test() {
        val json = "{\"p1\":\"p1 value\",\"p2\":\"p2 value\"}".toJson()
        val map: Map&lt;String, String&gt; = json.toObject(object : TypeRef&lt;Map&lt;String, String&gt;&gt;() {})
    }
}</programlisting>
</para>
</formalpara>
<simpara><literal>JsonSerials</literal> 使用默认的 <literal>JsonSerializer</literal>&#8201;&#8212;&#8201;<literal>Serializer</literal> 针对 <literal>JSON</literal> 格式的核心接口, 来实现它的方法.
我们也可以直接使用 <literal>JsonSerializer</literal>:</simpara>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">class Example{
    @Test
    public void test() {
        JsonSerializer serializer = JsonSerializer.DEFAULT;
        String mapJson = "{\"p1\":\"p1 value\",\"p2\":\"p2 value\"}";
        Map&lt;String, String&gt; map = serializer.toJson(mapJson).toObject(new TypeRef&lt;Map&lt;String, String&gt;&gt;() {
        });
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">class Example {
    @Test
    fun test() {
        val serializer = JsonSerializer.DEFAULT
        val mapJson = "{\"p1\":\"p1 value\",\"p2\":\"p2 value\"}"
        val map: Map&lt;String, String&gt; =
            serializer.toJson(mapJson).toObject(object : TypeRef&lt;Map&lt;String, String&gt;&gt;() {})
    }
}</programlisting>
</para>
</formalpara>
<simpara>默认的 <literal>JsonSerializer</literal> 实现来自于 <literal>Jacksons.DEFAULT_OBJECT_MAPPER</literal>, 一个 <literal>jackson</literal> 的 <literal>ObjectMapper</literal>.
我们也可以用另一个 <literal>oObjectMapper</literal> 创建一个定制的 <literal>JsonSerializer</literal>:</simpara>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">class Example{
    @Test
    public void test() {
        JsonSerializer serializer = Jacksons.newJsonSerializer(Jacksons.DEFAULT_OBJECT_MAPPER);
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">class Example {
    @Test
    fun test() {
        val serializer: JsonSerializer = DEFAULT_OBJECT_MAPPER.toJsonSerializer()
    }
}</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="_样例">
<title>样例</title>
<formalpara>
<title>Java Examples</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package sample.java.xyz.srclab.serialize;

import org.testng.annotations.Test;
import xyz.srclab.common.reflect.TypeRef;
import xyz.srclab.common.serialize.json.Jacksons;
import xyz.srclab.common.serialize.json.Json;
import xyz.srclab.common.serialize.json.JsonSerializer;
import xyz.srclab.common.serialize.json.JsonSerials;
import xyz.srclab.common.test.TestLogger;

import java.util.Map;

public class SerializeSample {

    private static final TestLogger logger = TestLogger.DEFAULT;

    @Test
    public void testJsonSerials() {
        Json json = JsonSerials.toJson("{\"p1\":\"p1 value\",\"p2\":\"p2 value\"}");
        Map&lt;String, String&gt; map = json.toObject(new TypeRef&lt;Map&lt;String, String&gt;&gt;() {
        });
        //{p1=p1 value, p2=p2 value}
        logger.log(map);

        String stringJson = "abc";
        //"abc"
        logger.log("stringJson: {}", JsonSerials.stringify(stringJson));
    }

    @Test
    public void testJsonSerializer() {
        JsonSerializer serializer = JsonSerializer.DEFAULT;
        String mapJson = "{\"p1\":\"p1 value\",\"p2\":\"p2 value\"}";
        Map&lt;String, String&gt; map = serializer.toJson(mapJson).toObject(new TypeRef&lt;Map&lt;String, String&gt;&gt;() {
        });
        //{p1=p1 value, p2=p2 value}
        logger.log(map);

        String stringJson = "abc";
        //"abc"
        logger.log("stringJson: {}", serializer.serialize(stringJson));
    }

    @Test
    public void testJackson() {
        JsonSerializer serializer = Jacksons.newJsonSerializer(Jacksons.DEFAULT_OBJECT_MAPPER);
        String mapJson = "{\"p1\":\"p1 value\",\"p2\":\"p2 value\"}";
        Map&lt;String, String&gt; map = serializer.toJson(mapJson).toObject(new TypeRef&lt;Map&lt;String, String&gt;&gt;() {
        });
        //{p1=p1 value, p2=p2 value}
        logger.log(map);

        String stringJson = "abc";
        //"abc"
        logger.log("stringJson: {}", serializer.serialize(stringJson));
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Kotlin Examples</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">package sample.kotlin.xyz.srclab.serialize

import org.testng.annotations.Test
import xyz.srclab.common.reflect.TypeRef
import xyz.srclab.common.serialize.json.*
import xyz.srclab.common.test.TestLogger

class SerializeSample {

    private val logger = TestLogger.DEFAULT

    @Test
    fun testJsonSerials() {
        val json = "{\"p1\":\"p1 value\",\"p2\":\"p2 value\"}".toJson()
        val map: Map&lt;String, String&gt; = json.toObject(object : TypeRef&lt;Map&lt;String, String&gt;&gt;() {})
        //{p1=p1 value, p2=p2 value}
        logger.log(map)
        val stringJson = "abc"
        //"abc"
        logger.log("stringJson: {}", stringJson.stringify())
    }

    @Test
    fun testJsonSerializer() {
        val serializer = JsonSerializer.DEFAULT
        val mapJson = "{\"p1\":\"p1 value\",\"p2\":\"p2 value\"}"
        val map: Map&lt;String, String&gt; =
            serializer.toJson(mapJson).toObject(object : TypeRef&lt;Map&lt;String, String&gt;&gt;() {})
        //{p1=p1 value, p2=p2 value}
        logger.log(map)
        val stringJson = "abc"
        //"abc"
        logger.log("stringJson: {}", serializer.serialize(stringJson))
    }

    @Test
    fun testJackson() {
        val serializer: JsonSerializer = DEFAULT_OBJECT_MAPPER.toJsonSerializer()
        val mapJson = "{\"p1\":\"p1 value\",\"p2\":\"p2 value\"}"
        val map: Map&lt;String, String&gt; =
            serializer.toJson(mapJson).toObject(object : TypeRef&lt;Map&lt;String, String&gt;&gt;() {})
        //{p1=p1 value, p2=p2 value}
        logger.log(map)
        val stringJson = "abc"
        //"abc"
        logger.log("stringJson: {}", serializer.serialize(stringJson))
    }
}</programlisting>
</para>
</formalpara>
</section>
</article>